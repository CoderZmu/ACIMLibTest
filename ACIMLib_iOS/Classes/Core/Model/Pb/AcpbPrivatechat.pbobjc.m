// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: acpb.privatechat.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(ACGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define ACGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if ACGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/ACGPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "ACGPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "AcpbPrivatechat.pbobjc.h"
#import "AcpbGlobalStructure.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
ACGPBObjCClassDeclaration(ACPBAesKeyAndIV);
ACGPBObjCClassDeclaration(ACPBBriefDialog);
ACGPBObjCClassDeclaration(ACPBBriefDialogMessage);
ACGPBObjCClassDeclaration(ACPBChatMessage);
ACGPBObjCClassDeclaration(ACPBDialogMessage);
ACGPBObjCClassDeclaration(ACPBDialogMessageList);
ACGPBObjCClassDeclaration(ACPBGetBriefDialogListResp);
ACGPBObjCClassDeclaration(ACPBGetDialogKeyResp);
ACGPBObjCClassDeclaration(ACPBGetNewMessageResp);
ACGPBObjCClassDeclaration(ACPBGetNewSettingDialogListResp);
ACGPBObjCClassDeclaration(ACPBNewMessagePushResp);
ACGPBObjCClassDeclaration(ACPBReferenceDialogMessage);

#pragma mark - AcpbPrivatechatRoot

@implementation AcpbPrivatechatRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - AcpbPrivatechatRoot_FileDescriptor

static ACGPBFileDescriptor *AcpbPrivatechatRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static ACGPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    ACGPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[ACGPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:ACGPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ACPBNewMessageNotificationResp

@implementation ACPBNewMessageNotificationResp

@dynamic errorCode;
@dynamic errorMessage;
@dynamic seqno;

typedef struct ACPBNewMessageNotificationResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
  int64_t seqno;
} ACPBNewMessageNotificationResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBNewMessageNotificationResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBNewMessageNotificationResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBNewMessageNotificationResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBNewMessageNotificationResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "seqno",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBNewMessageNotificationResp_FieldNumber_Seqno,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBNewMessageNotificationResp__storage_, seqno),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBNewMessageNotificationResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBNewMessageNotificationResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBNewMessagePushResp

@implementation ACPBNewMessagePushResp

@dynamic errorCode;
@dynamic errorMessage;
@dynamic msg, msg_Count;

typedef struct ACPBNewMessagePushResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
  NSMutableDictionary *msg;
} ACPBNewMessagePushResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBNewMessagePushResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBNewMessagePushResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBNewMessagePushResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBNewMessagePushResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACPBBriefDialogMessage),
        .number = ACPBNewMessagePushResp_FieldNumber_Msg,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBNewMessagePushResp__storage_, msg),
        .flags = ACGPBFieldMapKeyString,
        .dataType = ACGPBDataTypeMessage,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBNewMessagePushResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBNewMessagePushResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBStartTypingPrivateChatMessagePushResp

@implementation ACPBStartTypingPrivateChatMessagePushResp

@dynamic errorCode;
@dynamic errorMessage;
@dynamic destId;

typedef struct ACPBStartTypingPrivateChatMessagePushResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
  int64_t destId;
} ACPBStartTypingPrivateChatMessagePushResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBStartTypingPrivateChatMessagePushResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBStartTypingPrivateChatMessagePushResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBStartTypingPrivateChatMessagePushResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBStartTypingPrivateChatMessagePushResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "destId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBStartTypingPrivateChatMessagePushResp_FieldNumber_DestId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBStartTypingPrivateChatMessagePushResp__storage_, destId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBStartTypingPrivateChatMessagePushResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBStartTypingPrivateChatMessagePushResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\t\000\002\014\000\003\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBEndTypingPrivateChatMessagePushResp

@implementation ACPBEndTypingPrivateChatMessagePushResp

@dynamic errorCode;
@dynamic errorMessage;
@dynamic destId;

typedef struct ACPBEndTypingPrivateChatMessagePushResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
  int64_t destId;
} ACPBEndTypingPrivateChatMessagePushResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBEndTypingPrivateChatMessagePushResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBEndTypingPrivateChatMessagePushResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBEndTypingPrivateChatMessagePushResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBEndTypingPrivateChatMessagePushResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "destId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBEndTypingPrivateChatMessagePushResp_FieldNumber_DestId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBEndTypingPrivateChatMessagePushResp__storage_, destId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBEndTypingPrivateChatMessagePushResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBEndTypingPrivateChatMessagePushResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\t\000\002\014\000\003\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBSendPrivateChatMessageReq

@implementation ACPBSendPrivateChatMessageReq

@dynamic destId;
@dynamic localId;
@dynamic msgPreContent;
@dynamic msgPostContent;
@dynamic mediaFlag;
@dynamic mediaConstructor;
@dynamic mediaAttribute;
@dynamic extra;
@dynamic pushContent;
@dynamic msgContent;
@dynamic isSystem;
@dynamic objectName;
@dynamic save;

typedef struct ACPBSendPrivateChatMessageReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t mediaConstructor;
  NSString *destId;
  NSString *msgPreContent;
  NSString *msgPostContent;
  NSString *mediaAttribute;
  NSString *extra;
  NSString *pushContent;
  NSData *msgContent;
  NSString *objectName;
  int64_t localId;
} ACPBSendPrivateChatMessageReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "destId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendPrivateChatMessageReq_FieldNumber_DestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBSendPrivateChatMessageReq__storage_, destId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "localId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendPrivateChatMessageReq_FieldNumber_LocalId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBSendPrivateChatMessageReq__storage_, localId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgPreContent",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendPrivateChatMessageReq_FieldNumber_MsgPreContent,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBSendPrivateChatMessageReq__storage_, msgPreContent),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "msgPostContent",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendPrivateChatMessageReq_FieldNumber_MsgPostContent,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACPBSendPrivateChatMessageReq__storage_, msgPostContent),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "mediaFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendPrivateChatMessageReq_FieldNumber_MediaFlag,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "mediaConstructor",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendPrivateChatMessageReq_FieldNumber_MediaConstructor,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ACPBSendPrivateChatMessageReq__storage_, mediaConstructor),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "mediaAttribute",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendPrivateChatMessageReq_FieldNumber_MediaAttribute,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ACPBSendPrivateChatMessageReq__storage_, mediaAttribute),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "extra",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendPrivateChatMessageReq_FieldNumber_Extra,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ACPBSendPrivateChatMessageReq__storage_, extra),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "pushContent",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendPrivateChatMessageReq_FieldNumber_PushContent,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ACPBSendPrivateChatMessageReq__storage_, pushContent),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "msgContent",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendPrivateChatMessageReq_FieldNumber_MsgContent,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ACPBSendPrivateChatMessageReq__storage_, msgContent),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBytes,
      },
      {
        .name = "isSystem",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendPrivateChatMessageReq_FieldNumber_IsSystem,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "objectName",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendPrivateChatMessageReq_FieldNumber_ObjectName,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(ACPBSendPrivateChatMessageReq__storage_, objectName),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "save",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendPrivateChatMessageReq_FieldNumber_Save,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBSendPrivateChatMessageReq class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBSendPrivateChatMessageReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\001\006\000\002\007\000\003\r\000\004\016\000\005\t\000\006\020\000\007\016\000\t\013\000\n\n\000\013\010\000\014\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBSendPrivateChatMessageResp

@implementation ACPBSendPrivateChatMessageResp

@dynamic errorCode;
@dynamic errorMessage;
@dynamic localId;
@dynamic msgId;
@dynamic msgSendTime;
@dynamic seqno;

typedef struct ACPBSendPrivateChatMessageResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
  int64_t localId;
  int64_t msgId;
  int64_t msgSendTime;
  int64_t seqno;
} ACPBSendPrivateChatMessageResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendPrivateChatMessageResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBSendPrivateChatMessageResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendPrivateChatMessageResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBSendPrivateChatMessageResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "localId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendPrivateChatMessageResp_FieldNumber_LocalId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBSendPrivateChatMessageResp__storage_, localId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendPrivateChatMessageResp_FieldNumber_MsgId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACPBSendPrivateChatMessageResp__storage_, msgId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgSendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendPrivateChatMessageResp_FieldNumber_MsgSendTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ACPBSendPrivateChatMessageResp__storage_, msgSendTime),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "seqno",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendPrivateChatMessageResp_FieldNumber_Seqno,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ACPBSendPrivateChatMessageResp__storage_, seqno),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBSendPrivateChatMessageResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBSendPrivateChatMessageResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\t\000\002\014\000\003\007\000\004\005\000\005\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBReplyPrivateChatMessageReq

@implementation ACPBReplyPrivateChatMessageReq

@dynamic destId;
@dynamic localId;
@dynamic msgPreContent;
@dynamic msgPostContent;
@dynamic mediaFlag;
@dynamic mediaConstructor;
@dynamic mediaAttribute;
@dynamic msgIdReferenced;
@dynamic msgSrcIdReferenced;
@dynamic msgDestIdReferenced;
@dynamic msgPreContentReferenced;
@dynamic msgPostContentReferenced;
@dynamic mediaFlagReferenced;
@dynamic mediaConstructorReferenced;
@dynamic mediaAttributeReferenced;
@dynamic msgSendTimeReferenced;

typedef struct ACPBReplyPrivateChatMessageReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t mediaConstructor;
  int32_t mediaConstructorReferenced;
  NSString *destId;
  NSString *msgPreContent;
  NSString *msgPostContent;
  NSString *mediaAttribute;
  NSString *msgPreContentReferenced;
  NSString *msgPostContentReferenced;
  NSString *mediaAttributeReferenced;
  int64_t localId;
  int64_t msgIdReferenced;
  int64_t msgSrcIdReferenced;
  int64_t msgDestIdReferenced;
  int64_t msgSendTimeReferenced;
} ACPBReplyPrivateChatMessageReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "destId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyPrivateChatMessageReq_FieldNumber_DestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBReplyPrivateChatMessageReq__storage_, destId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "localId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyPrivateChatMessageReq_FieldNumber_LocalId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBReplyPrivateChatMessageReq__storage_, localId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgPreContent",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyPrivateChatMessageReq_FieldNumber_MsgPreContent,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBReplyPrivateChatMessageReq__storage_, msgPreContent),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "msgPostContent",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyPrivateChatMessageReq_FieldNumber_MsgPostContent,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACPBReplyPrivateChatMessageReq__storage_, msgPostContent),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "mediaFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyPrivateChatMessageReq_FieldNumber_MediaFlag,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "mediaConstructor",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyPrivateChatMessageReq_FieldNumber_MediaConstructor,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ACPBReplyPrivateChatMessageReq__storage_, mediaConstructor),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "mediaAttribute",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyPrivateChatMessageReq_FieldNumber_MediaAttribute,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ACPBReplyPrivateChatMessageReq__storage_, mediaAttribute),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "msgIdReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyPrivateChatMessageReq_FieldNumber_MsgIdReferenced,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ACPBReplyPrivateChatMessageReq__storage_, msgIdReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgSrcIdReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyPrivateChatMessageReq_FieldNumber_MsgSrcIdReferenced,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ACPBReplyPrivateChatMessageReq__storage_, msgSrcIdReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgDestIdReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyPrivateChatMessageReq_FieldNumber_MsgDestIdReferenced,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ACPBReplyPrivateChatMessageReq__storage_, msgDestIdReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgPreContentReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyPrivateChatMessageReq_FieldNumber_MsgPreContentReferenced,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(ACPBReplyPrivateChatMessageReq__storage_, msgPreContentReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "msgPostContentReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyPrivateChatMessageReq_FieldNumber_MsgPostContentReferenced,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(ACPBReplyPrivateChatMessageReq__storage_, msgPostContentReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "mediaFlagReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyPrivateChatMessageReq_FieldNumber_MediaFlagReferenced,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "mediaConstructorReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyPrivateChatMessageReq_FieldNumber_MediaConstructorReferenced,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(ACPBReplyPrivateChatMessageReq__storage_, mediaConstructorReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "mediaAttributeReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyPrivateChatMessageReq_FieldNumber_MediaAttributeReferenced,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(ACPBReplyPrivateChatMessageReq__storage_, mediaAttributeReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "msgSendTimeReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyPrivateChatMessageReq_FieldNumber_MsgSendTimeReferenced,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(ACPBReplyPrivateChatMessageReq__storage_, msgSendTimeReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBReplyPrivateChatMessageReq class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBReplyPrivateChatMessageReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\020\001\006\000\002\007\000\003\r\000\004\016\000\005\t\000\006\020\000\007\016\000\010\017\000\t\022\000\n\023\000\013\027\000\014\030\000\r\023\000"
        "\016\032\000\017\030\000\020\025\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBReplyPrivateChatMessageResp

@implementation ACPBReplyPrivateChatMessageResp

@dynamic errorCode;
@dynamic errorMessage;
@dynamic localId;
@dynamic msgId;
@dynamic msgSendTime;

typedef struct ACPBReplyPrivateChatMessageResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
  int64_t localId;
  int64_t msgId;
  int64_t msgSendTime;
} ACPBReplyPrivateChatMessageResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyPrivateChatMessageResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBReplyPrivateChatMessageResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyPrivateChatMessageResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBReplyPrivateChatMessageResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "localId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyPrivateChatMessageResp_FieldNumber_LocalId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBReplyPrivateChatMessageResp__storage_, localId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyPrivateChatMessageResp_FieldNumber_MsgId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACPBReplyPrivateChatMessageResp__storage_, msgId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgSendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyPrivateChatMessageResp_FieldNumber_MsgSendTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ACPBReplyPrivateChatMessageResp__storage_, msgSendTime),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBReplyPrivateChatMessageResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBReplyPrivateChatMessageResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\t\000\002\014\000\003\007\000\004\005\000\005\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBForwardMessageToPrivateChatReq

@implementation ACPBForwardMessageToPrivateChatReq

@dynamic destId;
@dynamic localId;
@dynamic msgPreContent;
@dynamic msgPostContent;
@dynamic mediaFlag;
@dynamic mediaConstructor;
@dynamic mediaAttribute;
@dynamic msgIdReferenced;
@dynamic msgSrcIdReferenced;
@dynamic msgDestIdReferenced;
@dynamic msgPreContentReferenced;
@dynamic msgPostContentReferenced;
@dynamic mediaFlagReferenced;
@dynamic mediaConstructorReferenced;
@dynamic mediaAttributeReferenced;
@dynamic msgSendTimeReferenced;
@dynamic msgGroupFlagReferenced;
@dynamic msgGroupIdReferenced;

typedef struct ACPBForwardMessageToPrivateChatReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t mediaConstructor;
  int32_t mediaConstructorReferenced;
  NSString *destId;
  NSString *msgPreContent;
  NSString *msgPostContent;
  NSString *mediaAttribute;
  NSString *msgPreContentReferenced;
  NSString *msgPostContentReferenced;
  NSString *mediaAttributeReferenced;
  int64_t localId;
  int64_t msgIdReferenced;
  int64_t msgSrcIdReferenced;
  int64_t msgDestIdReferenced;
  int64_t msgSendTimeReferenced;
  int64_t msgGroupIdReferenced;
} ACPBForwardMessageToPrivateChatReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "destId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBForwardMessageToPrivateChatReq_FieldNumber_DestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBForwardMessageToPrivateChatReq__storage_, destId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "localId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBForwardMessageToPrivateChatReq_FieldNumber_LocalId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBForwardMessageToPrivateChatReq__storage_, localId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgPreContent",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBForwardMessageToPrivateChatReq_FieldNumber_MsgPreContent,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBForwardMessageToPrivateChatReq__storage_, msgPreContent),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "msgPostContent",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBForwardMessageToPrivateChatReq_FieldNumber_MsgPostContent,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACPBForwardMessageToPrivateChatReq__storage_, msgPostContent),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "mediaFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBForwardMessageToPrivateChatReq_FieldNumber_MediaFlag,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "mediaConstructor",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBForwardMessageToPrivateChatReq_FieldNumber_MediaConstructor,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ACPBForwardMessageToPrivateChatReq__storage_, mediaConstructor),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "mediaAttribute",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBForwardMessageToPrivateChatReq_FieldNumber_MediaAttribute,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ACPBForwardMessageToPrivateChatReq__storage_, mediaAttribute),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "msgIdReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBForwardMessageToPrivateChatReq_FieldNumber_MsgIdReferenced,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ACPBForwardMessageToPrivateChatReq__storage_, msgIdReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgSrcIdReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBForwardMessageToPrivateChatReq_FieldNumber_MsgSrcIdReferenced,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ACPBForwardMessageToPrivateChatReq__storage_, msgSrcIdReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgDestIdReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBForwardMessageToPrivateChatReq_FieldNumber_MsgDestIdReferenced,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ACPBForwardMessageToPrivateChatReq__storage_, msgDestIdReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgPreContentReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBForwardMessageToPrivateChatReq_FieldNumber_MsgPreContentReferenced,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(ACPBForwardMessageToPrivateChatReq__storage_, msgPreContentReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "msgPostContentReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBForwardMessageToPrivateChatReq_FieldNumber_MsgPostContentReferenced,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(ACPBForwardMessageToPrivateChatReq__storage_, msgPostContentReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "mediaFlagReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBForwardMessageToPrivateChatReq_FieldNumber_MediaFlagReferenced,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "mediaConstructorReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBForwardMessageToPrivateChatReq_FieldNumber_MediaConstructorReferenced,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(ACPBForwardMessageToPrivateChatReq__storage_, mediaConstructorReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "mediaAttributeReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBForwardMessageToPrivateChatReq_FieldNumber_MediaAttributeReferenced,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(ACPBForwardMessageToPrivateChatReq__storage_, mediaAttributeReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "msgSendTimeReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBForwardMessageToPrivateChatReq_FieldNumber_MsgSendTimeReferenced,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(ACPBForwardMessageToPrivateChatReq__storage_, msgSendTimeReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgGroupFlagReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBForwardMessageToPrivateChatReq_FieldNumber_MsgGroupFlagReferenced,
        .hasIndex = 18,
        .offset = 19,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "msgGroupIdReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBForwardMessageToPrivateChatReq_FieldNumber_MsgGroupIdReferenced,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(ACPBForwardMessageToPrivateChatReq__storage_, msgGroupIdReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBForwardMessageToPrivateChatReq class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBForwardMessageToPrivateChatReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\022\001\006\000\002\007\000\003\r\000\004\016\000\005\t\000\006\020\000\007\016\000\010\017\000\t\022\000\n\023\000\013\027\000\014\030\000\r\023\000"
        "\016\032\000\017\030\000\020\025\000\021\026\000\022\024\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBForwardMessageToPrivateChatResp

@implementation ACPBForwardMessageToPrivateChatResp

@dynamic errorCode;
@dynamic errorMessage;
@dynamic localId;
@dynamic msgId;
@dynamic msgSendTime;

typedef struct ACPBForwardMessageToPrivateChatResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
  int64_t localId;
  int64_t msgId;
  int64_t msgSendTime;
} ACPBForwardMessageToPrivateChatResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBForwardMessageToPrivateChatResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBForwardMessageToPrivateChatResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBForwardMessageToPrivateChatResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBForwardMessageToPrivateChatResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "localId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBForwardMessageToPrivateChatResp_FieldNumber_LocalId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBForwardMessageToPrivateChatResp__storage_, localId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBForwardMessageToPrivateChatResp_FieldNumber_MsgId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACPBForwardMessageToPrivateChatResp__storage_, msgId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgSendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBForwardMessageToPrivateChatResp_FieldNumber_MsgSendTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ACPBForwardMessageToPrivateChatResp__storage_, msgSendTime),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBForwardMessageToPrivateChatResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBForwardMessageToPrivateChatResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\t\000\002\014\000\003\007\000\004\005\000\005\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBDeletePrivateChatDialogReq

@implementation ACPBDeletePrivateChatDialogReq

@dynamic destId;

typedef struct ACPBDeletePrivateChatDialogReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *destId;
} ACPBDeletePrivateChatDialogReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "destId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBDeletePrivateChatDialogReq_FieldNumber_DestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBDeletePrivateChatDialogReq__storage_, destId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBDeletePrivateChatDialogReq class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBDeletePrivateChatDialogReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBDeletePrivateChatDialogResp

@implementation ACPBDeletePrivateChatDialogResp

@dynamic errorCode;
@dynamic errorMessage;

typedef struct ACPBDeletePrivateChatDialogResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
} ACPBDeletePrivateChatDialogResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBDeletePrivateChatDialogResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBDeletePrivateChatDialogResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBDeletePrivateChatDialogResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBDeletePrivateChatDialogResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBDeletePrivateChatDialogResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBDeletePrivateChatDialogResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBGetPrivateChatDialogDetailReq

@implementation ACPBGetPrivateChatDialogDetailReq

@dynamic destId;

typedef struct ACPBGetPrivateChatDialogDetailReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *destId;
} ACPBGetPrivateChatDialogDetailReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "destId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetPrivateChatDialogDetailReq_FieldNumber_DestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBGetPrivateChatDialogDetailReq__storage_, destId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBGetPrivateChatDialogDetailReq class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBGetPrivateChatDialogDetailReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBGetPrivateChatDialogDetailResp

@implementation ACPBGetPrivateChatDialogDetailResp

@dynamic errorCode;
@dynamic errorMessage;
@dynamic destId;
@dynamic dialogTitle;
@dynamic smallAvatarURL;
@dynamic originalAvatarURL;
@dynamic qrcodeString;
@dynamic stickyFlag;
@dynamic muteFlag;
@dynamic blockFlag;
@dynamic burnAfterReadingFlag;
@dynamic takeScreenshotFlag;
@dynamic burnAfterReadingTime;

typedef struct ACPBGetPrivateChatDialogDetailResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
  NSString *destId;
  NSString *dialogTitle;
  NSString *smallAvatarURL;
  NSString *originalAvatarURL;
  NSString *qrcodeString;
  int64_t burnAfterReadingTime;
} ACPBGetPrivateChatDialogDetailResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetPrivateChatDialogDetailResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBGetPrivateChatDialogDetailResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetPrivateChatDialogDetailResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBGetPrivateChatDialogDetailResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "destId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetPrivateChatDialogDetailResp_FieldNumber_DestId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBGetPrivateChatDialogDetailResp__storage_, destId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "dialogTitle",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetPrivateChatDialogDetailResp_FieldNumber_DialogTitle,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACPBGetPrivateChatDialogDetailResp__storage_, dialogTitle),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "smallAvatarURL",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetPrivateChatDialogDetailResp_FieldNumber_SmallAvatarURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ACPBGetPrivateChatDialogDetailResp__storage_, smallAvatarURL),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "originalAvatarURL",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetPrivateChatDialogDetailResp_FieldNumber_OriginalAvatarURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ACPBGetPrivateChatDialogDetailResp__storage_, originalAvatarURL),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "qrcodeString",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetPrivateChatDialogDetailResp_FieldNumber_QrcodeString,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ACPBGetPrivateChatDialogDetailResp__storage_, qrcodeString),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "stickyFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetPrivateChatDialogDetailResp_FieldNumber_StickyFlag,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "muteFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetPrivateChatDialogDetailResp_FieldNumber_MuteFlag,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "blockFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetPrivateChatDialogDetailResp_FieldNumber_BlockFlag,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "burnAfterReadingFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetPrivateChatDialogDetailResp_FieldNumber_BurnAfterReadingFlag,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "takeScreenshotFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetPrivateChatDialogDetailResp_FieldNumber_TakeScreenshotFlag,
        .hasIndex = 15,
        .offset = 16,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "burnAfterReadingTime",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetPrivateChatDialogDetailResp_FieldNumber_BurnAfterReadingTime,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(ACPBGetPrivateChatDialogDetailResp__storage_, burnAfterReadingTime),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBGetPrivateChatDialogDetailResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBGetPrivateChatDialogDetailResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\r\001\t\000\002\014\000\003\006\000\004\013\000\005\014!!\000\006\017!!\000\007\014\000\010\n\000\t\010\000\n\t\000\013\024\000\014\022"
        "\000\r\024\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBChatMessage

@implementation ACPBChatMessage

@dynamic destId;
@dynamic msgIdArray, msgIdArray_Count;

typedef struct ACPBChatMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *destId;
  ACGPBInt64Array *msgIdArray;
} ACPBChatMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "destId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBChatMessage_FieldNumber_DestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBChatMessage__storage_, destId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "msgIdArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBChatMessage_FieldNumber_MsgIdArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBChatMessage__storage_, msgIdArray),
        .flags = (ACGPBFieldFlags)(ACGPBFieldRepeated | ACGPBFieldPacked | ACGPBFieldTextFormatNameCustom),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBChatMessage class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBChatMessage__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\000\002\000msgId\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBSendPrivateChatReadAckReq

@implementation ACPBSendPrivateChatReadAckReq

@dynamic chatMessageArray, chatMessageArray_Count;

typedef struct ACPBSendPrivateChatReadAckReq__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *chatMessageArray;
} ACPBSendPrivateChatReadAckReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "chatMessageArray",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACPBChatMessage),
        .number = ACPBSendPrivateChatReadAckReq_FieldNumber_ChatMessageArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBSendPrivateChatReadAckReq__storage_, chatMessageArray),
        .flags = (ACGPBFieldFlags)(ACGPBFieldRepeated | ACGPBFieldTextFormatNameCustom),
        .dataType = ACGPBDataTypeMessage,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBSendPrivateChatReadAckReq class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBSendPrivateChatReadAckReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000chatMessage\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBSendPrivateChatReadAckResp

@implementation ACPBSendPrivateChatReadAckResp

@dynamic errorCode;
@dynamic errorMessage;

typedef struct ACPBSendPrivateChatReadAckResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
} ACPBSendPrivateChatReadAckResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendPrivateChatReadAckResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBSendPrivateChatReadAckResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendPrivateChatReadAckResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBSendPrivateChatReadAckResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBSendPrivateChatReadAckResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBSendPrivateChatReadAckResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBGetNewMessageReq

@implementation ACPBGetNewMessageReq

@dynamic offset;
@dynamic rows;

typedef struct ACPBGetNewMessageReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t rows;
  int64_t offset;
} ACPBGetNewMessageReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "offset",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetNewMessageReq_FieldNumber_Offset,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBGetNewMessageReq__storage_, offset),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "rows",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetNewMessageReq_FieldNumber_Rows,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBGetNewMessageReq__storage_, rows),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBGetNewMessageReq class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBGetNewMessageReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBGetNewMessageResp

@implementation ACPBGetNewMessageResp

@dynamic errorCode;
@dynamic errorMessage;
@dynamic offset;
@dynamic seqno;
@dynamic msg, msg_Count;
@dynamic reference, reference_Count;

typedef struct ACPBGetNewMessageResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
  NSMutableDictionary *msg;
  NSMutableDictionary *reference;
  int64_t offset;
  int64_t seqno;
} ACPBGetNewMessageResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetNewMessageResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBGetNewMessageResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetNewMessageResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBGetNewMessageResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "offset",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetNewMessageResp_FieldNumber_Offset,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBGetNewMessageResp__storage_, offset),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "seqno",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetNewMessageResp_FieldNumber_Seqno,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACPBGetNewMessageResp__storage_, seqno),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACPBDialogMessageList),
        .number = ACPBGetNewMessageResp_FieldNumber_Msg,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBGetNewMessageResp__storage_, msg),
        .flags = ACGPBFieldMapKeyString,
        .dataType = ACGPBDataTypeMessage,
      },
      {
        .name = "reference",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACPBReferenceDialogMessage),
        .number = ACPBGetNewMessageResp_FieldNumber_Reference,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBGetNewMessageResp__storage_, reference),
        .flags = ACGPBFieldMapKeyString,
        .dataType = ACGPBDataTypeMessage,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBGetNewMessageResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBGetNewMessageResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBDialogMessageList

@implementation ACPBDialogMessageList

@dynamic dialogMessageArray, dialogMessageArray_Count;

typedef struct ACPBDialogMessageList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *dialogMessageArray;
} ACPBDialogMessageList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "dialogMessageArray",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACPBDialogMessage),
        .number = ACPBDialogMessageList_FieldNumber_DialogMessageArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBDialogMessageList__storage_, dialogMessageArray),
        .flags = (ACGPBFieldFlags)(ACGPBFieldRepeated | ACGPBFieldTextFormatNameCustom),
        .dataType = ACGPBDataTypeMessage,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBDialogMessageList class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBDialogMessageList__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000dialogMessage\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBUpdatePrivateChatDialogStickyConfigReq

@implementation ACPBUpdatePrivateChatDialogStickyConfigReq

@dynamic destId;
@dynamic stickyFlag;

typedef struct ACPBUpdatePrivateChatDialogStickyConfigReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *destId;
} ACPBUpdatePrivateChatDialogStickyConfigReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "destId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdatePrivateChatDialogStickyConfigReq_FieldNumber_DestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBUpdatePrivateChatDialogStickyConfigReq__storage_, destId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "stickyFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdatePrivateChatDialogStickyConfigReq_FieldNumber_StickyFlag,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBUpdatePrivateChatDialogStickyConfigReq class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBUpdatePrivateChatDialogStickyConfigReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\000\002\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBUpdatePrivateChatDialogStickyConfigResp

@implementation ACPBUpdatePrivateChatDialogStickyConfigResp

@dynamic errorCode;
@dynamic errorMessage;

typedef struct ACPBUpdatePrivateChatDialogStickyConfigResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
} ACPBUpdatePrivateChatDialogStickyConfigResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdatePrivateChatDialogStickyConfigResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBUpdatePrivateChatDialogStickyConfigResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdatePrivateChatDialogStickyConfigResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBUpdatePrivateChatDialogStickyConfigResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBUpdatePrivateChatDialogStickyConfigResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBUpdatePrivateChatDialogStickyConfigResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBUpdatePrivateChatDialogMuteConfigReq

@implementation ACPBUpdatePrivateChatDialogMuteConfigReq

@dynamic destId;
@dynamic muteFlag;

typedef struct ACPBUpdatePrivateChatDialogMuteConfigReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *destId;
} ACPBUpdatePrivateChatDialogMuteConfigReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "destId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdatePrivateChatDialogMuteConfigReq_FieldNumber_DestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBUpdatePrivateChatDialogMuteConfigReq__storage_, destId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "muteFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdatePrivateChatDialogMuteConfigReq_FieldNumber_MuteFlag,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBUpdatePrivateChatDialogMuteConfigReq class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBUpdatePrivateChatDialogMuteConfigReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBUpdatePrivateChatDialogMuteConfigResp

@implementation ACPBUpdatePrivateChatDialogMuteConfigResp

@dynamic errorCode;
@dynamic errorMessage;

typedef struct ACPBUpdatePrivateChatDialogMuteConfigResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
} ACPBUpdatePrivateChatDialogMuteConfigResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdatePrivateChatDialogMuteConfigResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBUpdatePrivateChatDialogMuteConfigResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdatePrivateChatDialogMuteConfigResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBUpdatePrivateChatDialogMuteConfigResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBUpdatePrivateChatDialogMuteConfigResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBUpdatePrivateChatDialogMuteConfigResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBDeleteChatMessageReq

@implementation ACPBDeleteChatMessageReq

@dynamic destId;
@dynamic msgId;
@dynamic msgIdListArray, msgIdListArray_Count;

typedef struct ACPBDeleteChatMessageReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *destId;
  ACGPBInt64Array *msgIdListArray;
  int64_t msgId;
} ACPBDeleteChatMessageReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "destId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBDeleteChatMessageReq_FieldNumber_DestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBDeleteChatMessageReq__storage_, destId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBDeleteChatMessageReq_FieldNumber_MsgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBDeleteChatMessageReq__storage_, msgId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgIdListArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBDeleteChatMessageReq_FieldNumber_MsgIdListArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBDeleteChatMessageReq__storage_, msgIdListArray),
        .flags = (ACGPBFieldFlags)(ACGPBFieldRepeated | ACGPBFieldPacked | ACGPBFieldTextFormatNameCustom),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBDeleteChatMessageReq class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBDeleteChatMessageReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\006\000\002\005\000\003\000msgIdList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBDeleteChatMessageResp

@implementation ACPBDeleteChatMessageResp

@dynamic errorCode;
@dynamic errorMessage;

typedef struct ACPBDeleteChatMessageResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
} ACPBDeleteChatMessageResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBDeleteChatMessageResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBDeleteChatMessageResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBDeleteChatMessageResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBDeleteChatMessageResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBDeleteChatMessageResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBDeleteChatMessageResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBDeletePrivateChatHistoryReq

@implementation ACPBDeletePrivateChatHistoryReq

@dynamic destId;
@dynamic msgId;

typedef struct ACPBDeletePrivateChatHistoryReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *destId;
  int64_t msgId;
} ACPBDeletePrivateChatHistoryReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "destId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBDeletePrivateChatHistoryReq_FieldNumber_DestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBDeletePrivateChatHistoryReq__storage_, destId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBDeletePrivateChatHistoryReq_FieldNumber_MsgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBDeletePrivateChatHistoryReq__storage_, msgId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBDeletePrivateChatHistoryReq class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBDeletePrivateChatHistoryReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\000\002\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBCleanHistoryMessageReq

@implementation ACPBCleanHistoryMessageReq

@dynamic destId;
@dynamic type;
@dynamic msgTime;

typedef struct ACPBCleanHistoryMessageReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  NSString *destId;
  int64_t msgTime;
} ACPBCleanHistoryMessageReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "destId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBCleanHistoryMessageReq_FieldNumber_DestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBCleanHistoryMessageReq__storage_, destId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBCleanHistoryMessageReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBCleanHistoryMessageReq__storage_, type),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "msgTime",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBCleanHistoryMessageReq_FieldNumber_MsgTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBCleanHistoryMessageReq__storage_, msgTime),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBCleanHistoryMessageReq class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBCleanHistoryMessageReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\000\003\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBCleanHistoryMessageResp

@implementation ACPBCleanHistoryMessageResp

@dynamic errorCode;
@dynamic errorMessage;

typedef struct ACPBCleanHistoryMessageResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
} ACPBCleanHistoryMessageResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBCleanHistoryMessageResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBCleanHistoryMessageResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBCleanHistoryMessageResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBCleanHistoryMessageResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBCleanHistoryMessageResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBCleanHistoryMessageResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBDeletePrivateChatHistoryResp

@implementation ACPBDeletePrivateChatHistoryResp

@dynamic errorCode;
@dynamic errorMessage;

typedef struct ACPBDeletePrivateChatHistoryResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
} ACPBDeletePrivateChatHistoryResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBDeletePrivateChatHistoryResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBDeletePrivateChatHistoryResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBDeletePrivateChatHistoryResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBDeletePrivateChatHistoryResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBDeletePrivateChatHistoryResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBDeletePrivateChatHistoryResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBGetBriefDialogListReq

@implementation ACPBGetBriefDialogListReq

@dynamic destIdArray, destIdArray_Count;

typedef struct ACPBGetBriefDialogListReq__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *destIdArray;
} ACPBGetBriefDialogListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "destIdArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetBriefDialogListReq_FieldNumber_DestIdArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBGetBriefDialogListReq__storage_, destIdArray),
        .flags = (ACGPBFieldFlags)(ACGPBFieldRepeated | ACGPBFieldTextFormatNameCustom),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBGetBriefDialogListReq class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBGetBriefDialogListReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000destId\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBGetBriefDialogListResp

@implementation ACPBGetBriefDialogListResp

@dynamic errorCode;
@dynamic errorMessage;
@dynamic notExistDestIdArray, notExistDestIdArray_Count;
@dynamic seqno;
@dynamic briefDialog, briefDialog_Count;

typedef struct ACPBGetBriefDialogListResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
  ACGPBInt64Array *notExistDestIdArray;
  NSMutableDictionary *briefDialog;
  int64_t seqno;
} ACPBGetBriefDialogListResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetBriefDialogListResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBGetBriefDialogListResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetBriefDialogListResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBGetBriefDialogListResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "notExistDestIdArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetBriefDialogListResp_FieldNumber_NotExistDestIdArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBGetBriefDialogListResp__storage_, notExistDestIdArray),
        .flags = (ACGPBFieldFlags)(ACGPBFieldRepeated | ACGPBFieldPacked | ACGPBFieldTextFormatNameCustom),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "seqno",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetBriefDialogListResp_FieldNumber_Seqno,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBGetBriefDialogListResp__storage_, seqno),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "briefDialog",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACPBBriefDialog),
        .number = ACPBGetBriefDialogListResp_FieldNumber_BriefDialog,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBGetBriefDialogListResp__storage_, briefDialog),
        .flags = (ACGPBFieldFlags)(ACGPBFieldMapKeyString | ACGPBFieldTextFormatNameCustom),
        .dataType = ACGPBDataTypeMessage,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBGetBriefDialogListResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBGetBriefDialogListResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\t\000\002\014\000\003\000notExistDestId\000\005\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBUpdatePrivateChatDialogBurnAfterReadingConfigReq

@implementation ACPBUpdatePrivateChatDialogBurnAfterReadingConfigReq

@dynamic destId;
@dynamic burnAfterReadingFlag;
@dynamic burnAfterReadingTime;

typedef struct ACPBUpdatePrivateChatDialogBurnAfterReadingConfigReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t destId;
  int64_t burnAfterReadingTime;
} ACPBUpdatePrivateChatDialogBurnAfterReadingConfigReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "destId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdatePrivateChatDialogBurnAfterReadingConfigReq_FieldNumber_DestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBUpdatePrivateChatDialogBurnAfterReadingConfigReq__storage_, destId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "burnAfterReadingFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdatePrivateChatDialogBurnAfterReadingConfigReq_FieldNumber_BurnAfterReadingFlag,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "burnAfterReadingTime",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdatePrivateChatDialogBurnAfterReadingConfigReq_FieldNumber_BurnAfterReadingTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACPBUpdatePrivateChatDialogBurnAfterReadingConfigReq__storage_, burnAfterReadingTime),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBUpdatePrivateChatDialogBurnAfterReadingConfigReq class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBUpdatePrivateChatDialogBurnAfterReadingConfigReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\006\000\002\024\000\003\024\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBUpdatePrivateChatDialogBurnAfterReadingConfigResp

@implementation ACPBUpdatePrivateChatDialogBurnAfterReadingConfigResp

@dynamic errorCode;
@dynamic errorMessage;

typedef struct ACPBUpdatePrivateChatDialogBurnAfterReadingConfigResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
} ACPBUpdatePrivateChatDialogBurnAfterReadingConfigResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdatePrivateChatDialogBurnAfterReadingConfigResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBUpdatePrivateChatDialogBurnAfterReadingConfigResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdatePrivateChatDialogBurnAfterReadingConfigResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBUpdatePrivateChatDialogBurnAfterReadingConfigResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBUpdatePrivateChatDialogBurnAfterReadingConfigResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBUpdatePrivateChatDialogBurnAfterReadingConfigResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBGetDialogKeyReq

@implementation ACPBGetDialogKeyReq

@dynamic destIdArray, destIdArray_Count;
@dynamic clientSign;

typedef struct ACPBGetDialogKeyReq__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *destIdArray;
  NSString *clientSign;
} ACPBGetDialogKeyReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "destIdArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetDialogKeyReq_FieldNumber_DestIdArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBGetDialogKeyReq__storage_, destIdArray),
        .flags = (ACGPBFieldFlags)(ACGPBFieldRepeated | ACGPBFieldTextFormatNameCustom),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "clientSign",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetDialogKeyReq_FieldNumber_ClientSign,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBGetDialogKeyReq__storage_, clientSign),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBGetDialogKeyReq class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBGetDialogKeyReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\000destId\000\002\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBGetDialogKeyResp

@implementation ACPBGetDialogKeyResp

@dynamic errorCode;
@dynamic errorMessage;
@dynamic dialogKeyVersion;
@dynamic retryUidArray, retryUidArray_Count;
@dynamic entry, entry_Count;
@dynamic serverSign;

typedef struct ACPBGetDialogKeyResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
  ACGPBInt64Array *retryUidArray;
  NSMutableDictionary *entry;
  NSString *serverSign;
  int64_t dialogKeyVersion;
} ACPBGetDialogKeyResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetDialogKeyResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBGetDialogKeyResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetDialogKeyResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBGetDialogKeyResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "dialogKeyVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetDialogKeyResp_FieldNumber_DialogKeyVersion,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBGetDialogKeyResp__storage_, dialogKeyVersion),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "retryUidArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetDialogKeyResp_FieldNumber_RetryUidArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBGetDialogKeyResp__storage_, retryUidArray),
        .flags = (ACGPBFieldFlags)(ACGPBFieldRepeated | ACGPBFieldPacked | ACGPBFieldTextFormatNameCustom),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "entry",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACPBAesKeyAndIV),
        .number = ACPBGetDialogKeyResp_FieldNumber_Entry,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBGetDialogKeyResp__storage_, entry),
        .flags = ACGPBFieldMapKeyString,
        .dataType = ACGPBDataTypeMessage,
      },
      {
        .name = "serverSign",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetDialogKeyResp_FieldNumber_ServerSign,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACPBGetDialogKeyResp__storage_, serverSign),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBGetDialogKeyResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBGetDialogKeyResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\t\000\002\014\000\003\020\000\004\000retryUid\000\006\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBRecallPrivateChatMessageReq

@implementation ACPBRecallPrivateChatMessageReq

@dynamic destId;
@dynamic msgId;

typedef struct ACPBRecallPrivateChatMessageReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *destId;
  int64_t msgId;
} ACPBRecallPrivateChatMessageReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "destId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBRecallPrivateChatMessageReq_FieldNumber_DestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBRecallPrivateChatMessageReq__storage_, destId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBRecallPrivateChatMessageReq_FieldNumber_MsgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBRecallPrivateChatMessageReq__storage_, msgId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBRecallPrivateChatMessageReq class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBRecallPrivateChatMessageReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\000\002\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBRecallPrivateChatMessageResp

@implementation ACPBRecallPrivateChatMessageResp

@dynamic errorCode;
@dynamic errorMessage;

typedef struct ACPBRecallPrivateChatMessageResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
} ACPBRecallPrivateChatMessageResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBRecallPrivateChatMessageResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBRecallPrivateChatMessageResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBRecallPrivateChatMessageResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBRecallPrivateChatMessageResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBRecallPrivateChatMessageResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBRecallPrivateChatMessageResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBStartTypingPrivateChatReq

@implementation ACPBStartTypingPrivateChatReq

@dynamic destId;

typedef struct ACPBStartTypingPrivateChatReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *destId;
} ACPBStartTypingPrivateChatReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "destId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBStartTypingPrivateChatReq_FieldNumber_DestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBStartTypingPrivateChatReq__storage_, destId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBStartTypingPrivateChatReq class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBStartTypingPrivateChatReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBStartTypingPrivateChatResp

@implementation ACPBStartTypingPrivateChatResp

@dynamic errorCode;
@dynamic errorMessage;

typedef struct ACPBStartTypingPrivateChatResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
} ACPBStartTypingPrivateChatResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBStartTypingPrivateChatResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBStartTypingPrivateChatResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBStartTypingPrivateChatResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBStartTypingPrivateChatResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBStartTypingPrivateChatResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBStartTypingPrivateChatResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBEndTypingPrivateChatReq

@implementation ACPBEndTypingPrivateChatReq

@dynamic destId;

typedef struct ACPBEndTypingPrivateChatReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *destId;
} ACPBEndTypingPrivateChatReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "destId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBEndTypingPrivateChatReq_FieldNumber_DestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBEndTypingPrivateChatReq__storage_, destId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBEndTypingPrivateChatReq class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBEndTypingPrivateChatReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBEndTypingPrivateChatResp

@implementation ACPBEndTypingPrivateChatResp

@dynamic errorCode;
@dynamic errorMessage;

typedef struct ACPBEndTypingPrivateChatResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
} ACPBEndTypingPrivateChatResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBEndTypingPrivateChatResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBEndTypingPrivateChatResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBEndTypingPrivateChatResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBEndTypingPrivateChatResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBEndTypingPrivateChatResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBEndTypingPrivateChatResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBSendPrivateChatArrivalAckReq

@implementation ACPBSendPrivateChatArrivalAckReq

@dynamic chatMessageArray, chatMessageArray_Count;

typedef struct ACPBSendPrivateChatArrivalAckReq__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *chatMessageArray;
} ACPBSendPrivateChatArrivalAckReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "chatMessageArray",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACPBChatMessage),
        .number = ACPBSendPrivateChatArrivalAckReq_FieldNumber_ChatMessageArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBSendPrivateChatArrivalAckReq__storage_, chatMessageArray),
        .flags = (ACGPBFieldFlags)(ACGPBFieldRepeated | ACGPBFieldTextFormatNameCustom),
        .dataType = ACGPBDataTypeMessage,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBSendPrivateChatArrivalAckReq class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBSendPrivateChatArrivalAckReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000chatMessage\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBSendPrivateChatArrivalAckResp

@implementation ACPBSendPrivateChatArrivalAckResp

@dynamic errorCode;
@dynamic errorMessage;

typedef struct ACPBSendPrivateChatArrivalAckResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
} ACPBSendPrivateChatArrivalAckResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendPrivateChatArrivalAckResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBSendPrivateChatArrivalAckResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendPrivateChatArrivalAckResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBSendPrivateChatArrivalAckResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBSendPrivateChatArrivalAckResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBSendPrivateChatArrivalAckResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBGetNewSettingDialogListReq

@implementation ACPBGetNewSettingDialogListReq

@dynamic time;

typedef struct ACPBGetNewSettingDialogListReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t time;
} ACPBGetNewSettingDialogListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "time",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetNewSettingDialogListReq_FieldNumber_Time,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBGetNewSettingDialogListReq__storage_, time),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBGetNewSettingDialogListReq class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBGetNewSettingDialogListReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBGetNewSettingDialogListResp

@implementation ACPBGetNewSettingDialogListResp

@dynamic errorCode;
@dynamic errorMessage;
@dynamic briefDialog, briefDialog_Count;
@dynamic setTime;

typedef struct ACPBGetNewSettingDialogListResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
  NSMutableDictionary *briefDialog;
  int64_t setTime;
} ACPBGetNewSettingDialogListResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetNewSettingDialogListResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBGetNewSettingDialogListResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetNewSettingDialogListResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBGetNewSettingDialogListResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "briefDialog",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACPBBriefDialog),
        .number = ACPBGetNewSettingDialogListResp_FieldNumber_BriefDialog,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBGetNewSettingDialogListResp__storage_, briefDialog),
        .flags = (ACGPBFieldFlags)(ACGPBFieldMapKeyString | ACGPBFieldTextFormatNameCustom),
        .dataType = ACGPBDataTypeMessage,
      },
      {
        .name = "setTime",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetNewSettingDialogListResp_FieldNumber_SetTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBGetNewSettingDialogListResp__storage_, setTime),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBGetNewSettingDialogListResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBGetNewSettingDialogListResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\t\000\002\014\000\003\013\000\004\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBGetHistoryMessageReq

@implementation ACPBGetHistoryMessageReq

@dynamic dialogKeys;
@dynamic offset;
@dynamic oldOffset;
@dynamic rows;
@dynamic newToOld;

typedef struct ACPBGetHistoryMessageReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t rows;
  NSString *dialogKeys;
  int64_t offset;
  int64_t oldOffset;
} ACPBGetHistoryMessageReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "dialogKeys",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetHistoryMessageReq_FieldNumber_DialogKeys,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBGetHistoryMessageReq__storage_, dialogKeys),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "offset",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetHistoryMessageReq_FieldNumber_Offset,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBGetHistoryMessageReq__storage_, offset),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "oldOffset",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetHistoryMessageReq_FieldNumber_OldOffset,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBGetHistoryMessageReq__storage_, oldOffset),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "rows",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetHistoryMessageReq_FieldNumber_Rows,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACPBGetHistoryMessageReq__storage_, rows),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "newToOld",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetHistoryMessageReq_FieldNumber_NewToOld,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBGetHistoryMessageReq class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBGetHistoryMessageReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\n\000\003\t\000\005\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBGetHistoryMessageResp

@implementation ACPBGetHistoryMessageResp

@dynamic errorCode;
@dynamic errorMessage;
@dynamic hasMsg, msg;
@dynamic isEnd;

typedef struct ACPBGetHistoryMessageResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
  ACPBDialogMessageList *msg;
} ACPBGetHistoryMessageResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetHistoryMessageResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBGetHistoryMessageResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetHistoryMessageResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBGetHistoryMessageResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACPBDialogMessageList),
        .number = ACPBGetHistoryMessageResp_FieldNumber_Msg,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBGetHistoryMessageResp__storage_, msg),
        .flags = ACGPBFieldOptional,
        .dataType = ACGPBDataTypeMessage,
      },
      {
        .name = "isEnd",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetHistoryMessageResp_FieldNumber_IsEnd,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBGetHistoryMessageResp class]
                                     rootClass:[AcpbPrivatechatRoot class]
                                          file:AcpbPrivatechatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBGetHistoryMessageResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\t\000\002\014\000\004\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
