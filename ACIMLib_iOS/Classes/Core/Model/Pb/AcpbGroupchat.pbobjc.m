// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: acpb.groupchat.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(ACGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define ACGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if ACGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/ACGPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "ACGPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "AcpbGroupchat.pbobjc.h"
#import "AcpbGlobalStructure.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
ACGPBObjCClassDeclaration(ACPBDialogMessage);
ACGPBObjCClassDeclaration(ACPBGetNewSharingGroupMessageResp);
ACGPBObjCClassDeclaration(ACPBGroupChatMessage);
ACGPBObjCClassDeclaration(ACPBGroupMember);
ACGPBObjCClassDeclaration(ACPBReferenceDialogMessage);

#pragma mark - AcpbGroupchatRoot

@implementation AcpbGroupchatRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - AcpbGroupchatRoot_FileDescriptor

static ACGPBFileDescriptor *AcpbGroupchatRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static ACGPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    ACGPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[ACGPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:ACGPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ACPBGroupMember

@implementation ACPBGroupMember

@dynamic memberUid;
@dynamic memberName;
@dynamic memberAlias;
@dynamic memberSmallAvatarURL;
@dynamic referenceUid;
@dynamic joinTime;
@dynamic admin;

typedef struct ACPBGroupMember__storage_ {
  uint32_t _has_storage_[1];
  NSString *memberName;
  NSString *memberAlias;
  NSString *memberSmallAvatarURL;
  int64_t memberUid;
  int64_t referenceUid;
  int64_t joinTime;
} ACPBGroupMember__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "memberUid",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGroupMember_FieldNumber_MemberUid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBGroupMember__storage_, memberUid),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "memberName",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGroupMember_FieldNumber_MemberName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBGroupMember__storage_, memberName),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "memberAlias",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGroupMember_FieldNumber_MemberAlias,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBGroupMember__storage_, memberAlias),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "memberSmallAvatarURL",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGroupMember_FieldNumber_MemberSmallAvatarURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACPBGroupMember__storage_, memberSmallAvatarURL),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "referenceUid",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGroupMember_FieldNumber_ReferenceUid,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ACPBGroupMember__storage_, referenceUid),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "joinTime",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGroupMember_FieldNumber_JoinTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ACPBGroupMember__storage_, joinTime),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "admin",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGroupMember_FieldNumber_Admin,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBGroupMember class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBGroupMember__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\t\000\002\n\000\003\013\000\004\022!!\000\005\014\000\006\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBSendGroupChatMessageReq

@implementation ACPBSendGroupChatMessageReq

@dynamic groupId;
@dynamic localId;
@dynamic msgPreContent;
@dynamic msgPostContent;
@dynamic mediaFlag;
@dynamic mediaConstructor;
@dynamic mediaAttribute;
@dynamic atArray, atArray_Count;
@dynamic extra;
@dynamic assign;
@dynamic atAll;
@dynamic msgContent;
@dynamic pushContent;
@dynamic isBackEnd;
@dynamic isNotIncludeSender;
@dynamic objectName;
@dynamic save;

typedef struct ACPBSendGroupChatMessageReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t mediaConstructor;
  NSString *groupId;
  NSString *msgPreContent;
  NSString *msgPostContent;
  NSString *mediaAttribute;
  ACGPBInt64Array *atArray;
  NSString *extra;
  NSString *assign;
  NSData *msgContent;
  NSString *pushContent;
  NSString *objectName;
  int64_t localId;
} ACPBSendGroupChatMessageReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatMessageReq_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatMessageReq__storage_, groupId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "localId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatMessageReq_FieldNumber_LocalId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatMessageReq__storage_, localId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgPreContent",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatMessageReq_FieldNumber_MsgPreContent,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatMessageReq__storage_, msgPreContent),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "msgPostContent",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatMessageReq_FieldNumber_MsgPostContent,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatMessageReq__storage_, msgPostContent),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "mediaFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatMessageReq_FieldNumber_MediaFlag,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "mediaConstructor",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatMessageReq_FieldNumber_MediaConstructor,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatMessageReq__storage_, mediaConstructor),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "mediaAttribute",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatMessageReq_FieldNumber_MediaAttribute,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatMessageReq__storage_, mediaAttribute),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "atArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatMessageReq_FieldNumber_AtArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatMessageReq__storage_, atArray),
        .flags = (ACGPBFieldFlags)(ACGPBFieldRepeated | ACGPBFieldPacked),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "extra",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatMessageReq_FieldNumber_Extra,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatMessageReq__storage_, extra),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "assign",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatMessageReq_FieldNumber_Assign,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatMessageReq__storage_, assign),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "atAll",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatMessageReq_FieldNumber_AtAll,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "msgContent",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatMessageReq_FieldNumber_MsgContent,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatMessageReq__storage_, msgContent),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBytes,
      },
      {
        .name = "pushContent",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatMessageReq_FieldNumber_PushContent,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatMessageReq__storage_, pushContent),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "isBackEnd",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatMessageReq_FieldNumber_IsBackEnd,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "isNotIncludeSender",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatMessageReq_FieldNumber_IsNotIncludeSender,
        .hasIndex = 16,
        .offset = 17,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "objectName",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatMessageReq_FieldNumber_ObjectName,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatMessageReq__storage_, objectName),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "save",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatMessageReq_FieldNumber_Save,
        .hasIndex = 19,
        .offset = 20,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBSendGroupChatMessageReq class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBSendGroupChatMessageReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\r\001\007\000\002\007\000\003\r\000\004\016\000\005\t\000\006\020\000\007\016\000\013\005\000\014\n\000\r\013\000\016\t\000\017\022\000\020\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBSendGroupChatMessageResp

@implementation ACPBSendGroupChatMessageResp

@dynamic errorCode;
@dynamic errorMessage;
@dynamic localId;
@dynamic msgId;
@dynamic msgSendTime;
@dynamic seqno;

typedef struct ACPBSendGroupChatMessageResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
  int64_t localId;
  int64_t msgId;
  int64_t msgSendTime;
  int64_t seqno;
} ACPBSendGroupChatMessageResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatMessageResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatMessageResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatMessageResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatMessageResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "localId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatMessageResp_FieldNumber_LocalId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatMessageResp__storage_, localId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatMessageResp_FieldNumber_MsgId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatMessageResp__storage_, msgId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgSendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatMessageResp_FieldNumber_MsgSendTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatMessageResp__storage_, msgSendTime),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "seqno",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatMessageResp_FieldNumber_Seqno,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatMessageResp__storage_, seqno),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBSendGroupChatMessageResp class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBSendGroupChatMessageResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\t\000\002\014\000\003\007\000\004\005\000\005\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBReplyGroupChatMessageReq

@implementation ACPBReplyGroupChatMessageReq

@dynamic groupId;
@dynamic localId;
@dynamic msgPreContent;
@dynamic msgPostContent;
@dynamic mediaFlag;
@dynamic mediaConstructor;
@dynamic mediaAttribute;
@dynamic atArray, atArray_Count;
@dynamic msgIdReferenced;
@dynamic msgSrcIdReferenced;
@dynamic msgDestIdReferenced;
@dynamic msgPreContentReferenced;
@dynamic msgPostContentReferenced;
@dynamic mediaFlagReferenced;
@dynamic mediaConstructorReferenced;
@dynamic mediaAttributeReferenced;
@dynamic msgSendTimeReferenced;

typedef struct ACPBReplyGroupChatMessageReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t mediaConstructor;
  int32_t mediaConstructorReferenced;
  NSString *groupId;
  NSString *msgPreContent;
  NSString *msgPostContent;
  NSString *mediaAttribute;
  ACGPBInt64Array *atArray;
  NSString *msgPreContentReferenced;
  NSString *msgPostContentReferenced;
  NSString *mediaAttributeReferenced;
  int64_t localId;
  int64_t msgIdReferenced;
  int64_t msgSrcIdReferenced;
  int64_t msgDestIdReferenced;
  int64_t msgSendTimeReferenced;
} ACPBReplyGroupChatMessageReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyGroupChatMessageReq_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBReplyGroupChatMessageReq__storage_, groupId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "localId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyGroupChatMessageReq_FieldNumber_LocalId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBReplyGroupChatMessageReq__storage_, localId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgPreContent",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyGroupChatMessageReq_FieldNumber_MsgPreContent,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBReplyGroupChatMessageReq__storage_, msgPreContent),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "msgPostContent",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyGroupChatMessageReq_FieldNumber_MsgPostContent,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACPBReplyGroupChatMessageReq__storage_, msgPostContent),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "mediaFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyGroupChatMessageReq_FieldNumber_MediaFlag,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "mediaConstructor",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyGroupChatMessageReq_FieldNumber_MediaConstructor,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ACPBReplyGroupChatMessageReq__storage_, mediaConstructor),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "mediaAttribute",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyGroupChatMessageReq_FieldNumber_MediaAttribute,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ACPBReplyGroupChatMessageReq__storage_, mediaAttribute),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "atArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyGroupChatMessageReq_FieldNumber_AtArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBReplyGroupChatMessageReq__storage_, atArray),
        .flags = (ACGPBFieldFlags)(ACGPBFieldRepeated | ACGPBFieldPacked),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgIdReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyGroupChatMessageReq_FieldNumber_MsgIdReferenced,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ACPBReplyGroupChatMessageReq__storage_, msgIdReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgSrcIdReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyGroupChatMessageReq_FieldNumber_MsgSrcIdReferenced,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ACPBReplyGroupChatMessageReq__storage_, msgSrcIdReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgDestIdReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyGroupChatMessageReq_FieldNumber_MsgDestIdReferenced,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ACPBReplyGroupChatMessageReq__storage_, msgDestIdReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgPreContentReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyGroupChatMessageReq_FieldNumber_MsgPreContentReferenced,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(ACPBReplyGroupChatMessageReq__storage_, msgPreContentReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "msgPostContentReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyGroupChatMessageReq_FieldNumber_MsgPostContentReferenced,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(ACPBReplyGroupChatMessageReq__storage_, msgPostContentReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "mediaFlagReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyGroupChatMessageReq_FieldNumber_MediaFlagReferenced,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "mediaConstructorReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyGroupChatMessageReq_FieldNumber_MediaConstructorReferenced,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(ACPBReplyGroupChatMessageReq__storage_, mediaConstructorReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "mediaAttributeReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyGroupChatMessageReq_FieldNumber_MediaAttributeReferenced,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(ACPBReplyGroupChatMessageReq__storage_, mediaAttributeReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "msgSendTimeReferenced",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyGroupChatMessageReq_FieldNumber_MsgSendTimeReferenced,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(ACPBReplyGroupChatMessageReq__storage_, msgSendTimeReferenced),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBReplyGroupChatMessageReq class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBReplyGroupChatMessageReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\020\001\007\000\002\007\000\003\r\000\004\016\000\005\t\000\006\020\000\007\016\000\t\017\000\n\022\000\013\023\000\014\027\000\r\030\000\016\023\000"
        "\017\032\000\020\030\000\021\025\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBReplyGroupChatMessageResp

@implementation ACPBReplyGroupChatMessageResp

@dynamic errorCode;
@dynamic errorMessage;
@dynamic localId;
@dynamic msgId;
@dynamic msgSendTime;

typedef struct ACPBReplyGroupChatMessageResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
  int64_t localId;
  int64_t msgId;
  int64_t msgSendTime;
} ACPBReplyGroupChatMessageResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyGroupChatMessageResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBReplyGroupChatMessageResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyGroupChatMessageResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBReplyGroupChatMessageResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "localId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyGroupChatMessageResp_FieldNumber_LocalId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBReplyGroupChatMessageResp__storage_, localId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyGroupChatMessageResp_FieldNumber_MsgId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACPBReplyGroupChatMessageResp__storage_, msgId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgSendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBReplyGroupChatMessageResp_FieldNumber_MsgSendTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ACPBReplyGroupChatMessageResp__storage_, msgSendTime),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBReplyGroupChatMessageResp class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBReplyGroupChatMessageResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\t\000\002\014\000\003\007\000\004\005\000\005\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBGetGroupChatDialogDetailNewReq

@implementation ACPBGetGroupChatDialogDetailNewReq

@dynamic groupId;

typedef struct ACPBGetGroupChatDialogDetailNewReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
} ACPBGetGroupChatDialogDetailNewReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewReq_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBGetGroupChatDialogDetailNewReq__storage_, groupId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBGetGroupChatDialogDetailNewReq class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBGetGroupChatDialogDetailNewReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBGetGroupChatDialogDetailNewResp

@implementation ACPBGetGroupChatDialogDetailNewResp

@dynamic errorCode;
@dynamic errorMessage;
@dynamic groupId;
@dynamic adminId;
@dynamic isUntitled;
@dynamic groupTitle;
@dynamic announcementContent;
@dynamic announcementPostTime;
@dynamic announcementPostId;
@dynamic announcementPostUserSmallAvatarURL;
@dynamic smallAvatarURL;
@dynamic originalAvatarURL;
@dynamic qrcodeString;
@dynamic stickyFlag;
@dynamic muteFlag;
@dynamic blockFlag;
@dynamic burnAfterReadingFlag;
@dynamic groupAuthFlag;
@dynamic groupContactFlag;
@dynamic totalMemberNumber;
@dynamic groupMemberArray, groupMemberArray_Count;
@dynamic takeScreenshotFlag;
@dynamic groupMessageLifetimeFlag;
@dynamic groupMessageLifetime;
@dynamic burnAfterReadingTime;

typedef struct ACPBGetGroupChatDialogDetailNewResp__storage_ {
  uint32_t _has_storage_[2];
  int32_t errorCode;
  int32_t totalMemberNumber;
  NSString *errorMessage;
  NSString *groupId;
  NSString *adminId;
  NSString *groupTitle;
  NSString *announcementContent;
  NSString *announcementPostUserSmallAvatarURL;
  NSString *smallAvatarURL;
  NSString *originalAvatarURL;
  NSString *qrcodeString;
  NSMutableArray *groupMemberArray;
  int64_t announcementPostTime;
  int64_t announcementPostId;
  int64_t groupMessageLifetime;
  int64_t burnAfterReadingTime;
} ACPBGetGroupChatDialogDetailNewResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBGetGroupChatDialogDetailNewResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBGetGroupChatDialogDetailNewResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_GroupId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBGetGroupChatDialogDetailNewResp__storage_, groupId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "adminId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_AdminId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACPBGetGroupChatDialogDetailNewResp__storage_, adminId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "isUntitled",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_IsUntitled,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "groupTitle",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_GroupTitle,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ACPBGetGroupChatDialogDetailNewResp__storage_, groupTitle),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "announcementContent",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_AnnouncementContent,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ACPBGetGroupChatDialogDetailNewResp__storage_, announcementContent),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "announcementPostTime",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_AnnouncementPostTime,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ACPBGetGroupChatDialogDetailNewResp__storage_, announcementPostTime),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "announcementPostId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_AnnouncementPostId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ACPBGetGroupChatDialogDetailNewResp__storage_, announcementPostId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "announcementPostUserSmallAvatarURL",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_AnnouncementPostUserSmallAvatarURL,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ACPBGetGroupChatDialogDetailNewResp__storage_, announcementPostUserSmallAvatarURL),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "smallAvatarURL",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_SmallAvatarURL,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(ACPBGetGroupChatDialogDetailNewResp__storage_, smallAvatarURL),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "originalAvatarURL",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_OriginalAvatarURL,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(ACPBGetGroupChatDialogDetailNewResp__storage_, originalAvatarURL),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "qrcodeString",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_QrcodeString,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(ACPBGetGroupChatDialogDetailNewResp__storage_, qrcodeString),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "stickyFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_StickyFlag,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "muteFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_MuteFlag,
        .hasIndex = 16,
        .offset = 17,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "blockFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_BlockFlag,
        .hasIndex = 18,
        .offset = 19,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "burnAfterReadingFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_BurnAfterReadingFlag,
        .hasIndex = 20,
        .offset = 21,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "groupAuthFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_GroupAuthFlag,
        .hasIndex = 22,
        .offset = 23,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "groupContactFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_GroupContactFlag,
        .hasIndex = 24,
        .offset = 25,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "totalMemberNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_TotalMemberNumber,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(ACPBGetGroupChatDialogDetailNewResp__storage_, totalMemberNumber),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "groupMemberArray",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACPBGroupMember),
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_GroupMemberArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBGetGroupChatDialogDetailNewResp__storage_, groupMemberArray),
        .flags = (ACGPBFieldFlags)(ACGPBFieldRepeated | ACGPBFieldTextFormatNameCustom),
        .dataType = ACGPBDataTypeMessage,
      },
      {
        .name = "takeScreenshotFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_TakeScreenshotFlag,
        .hasIndex = 27,
        .offset = 28,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "groupMessageLifetimeFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_GroupMessageLifetimeFlag,
        .hasIndex = 29,
        .offset = 30,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "groupMessageLifetime",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_GroupMessageLifetime,
        .hasIndex = 31,
        .offset = (uint32_t)offsetof(ACPBGetGroupChatDialogDetailNewResp__storage_, groupMessageLifetime),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "burnAfterReadingTime",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetGroupChatDialogDetailNewResp_FieldNumber_BurnAfterReadingTime,
        .hasIndex = 32,
        .offset = (uint32_t)offsetof(ACPBGetGroupChatDialogDetailNewResp__storage_, burnAfterReadingTime),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBGetGroupChatDialogDetailNewResp class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBGetGroupChatDialogDetailNewResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\031\001\t\000\002\014\000\003\007\000\004\007\000\005\n\000\006\n\000\007\023\000\010\024\000\t\022\000\n\037\001!!\000\013\014!!\000\014"
        "\017!!\000\r\014\000\016\n\000\017\010\000\020\t\000\021\024\000\022\r\000\023\020\000\024\021\000\025\000groupMembe"
        "r\000\026\022\000\027\030\000\030\024\000\031\024\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBDeleteGroupChatHistoryReq

@implementation ACPBDeleteGroupChatHistoryReq

@dynamic groupId;

typedef struct ACPBDeleteGroupChatHistoryReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
} ACPBDeleteGroupChatHistoryReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBDeleteGroupChatHistoryReq_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBDeleteGroupChatHistoryReq__storage_, groupId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBDeleteGroupChatHistoryReq class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBDeleteGroupChatHistoryReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBDeleteGroupChatHistoryResp

@implementation ACPBDeleteGroupChatHistoryResp

@dynamic errorCode;
@dynamic errorMessage;

typedef struct ACPBDeleteGroupChatHistoryResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
} ACPBDeleteGroupChatHistoryResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBDeleteGroupChatHistoryResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBDeleteGroupChatHistoryResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBDeleteGroupChatHistoryResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBDeleteGroupChatHistoryResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBDeleteGroupChatHistoryResp class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBDeleteGroupChatHistoryResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBUpdateGroupChatDialogStickyConfigReq

@implementation ACPBUpdateGroupChatDialogStickyConfigReq

@dynamic groupId;
@dynamic stickyFlag;

typedef struct ACPBUpdateGroupChatDialogStickyConfigReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
} ACPBUpdateGroupChatDialogStickyConfigReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdateGroupChatDialogStickyConfigReq_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBUpdateGroupChatDialogStickyConfigReq__storage_, groupId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "stickyFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdateGroupChatDialogStickyConfigReq_FieldNumber_StickyFlag,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBUpdateGroupChatDialogStickyConfigReq class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBUpdateGroupChatDialogStickyConfigReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBUpdateGroupChatDialogStickyConfigResp

@implementation ACPBUpdateGroupChatDialogStickyConfigResp

@dynamic errorCode;
@dynamic errorMessage;

typedef struct ACPBUpdateGroupChatDialogStickyConfigResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
} ACPBUpdateGroupChatDialogStickyConfigResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdateGroupChatDialogStickyConfigResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBUpdateGroupChatDialogStickyConfigResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdateGroupChatDialogStickyConfigResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBUpdateGroupChatDialogStickyConfigResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBUpdateGroupChatDialogStickyConfigResp class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBUpdateGroupChatDialogStickyConfigResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBUpdateGroupChatDialogMuteConfigReq

@implementation ACPBUpdateGroupChatDialogMuteConfigReq

@dynamic groupId;
@dynamic muteFlag;

typedef struct ACPBUpdateGroupChatDialogMuteConfigReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
} ACPBUpdateGroupChatDialogMuteConfigReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdateGroupChatDialogMuteConfigReq_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBUpdateGroupChatDialogMuteConfigReq__storage_, groupId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "muteFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdateGroupChatDialogMuteConfigReq_FieldNumber_MuteFlag,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBUpdateGroupChatDialogMuteConfigReq class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBUpdateGroupChatDialogMuteConfigReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBUpdateGroupChatDialogMuteConfigResp

@implementation ACPBUpdateGroupChatDialogMuteConfigResp

@dynamic errorCode;
@dynamic errorMessage;

typedef struct ACPBUpdateGroupChatDialogMuteConfigResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
} ACPBUpdateGroupChatDialogMuteConfigResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdateGroupChatDialogMuteConfigResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBUpdateGroupChatDialogMuteConfigResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdateGroupChatDialogMuteConfigResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBUpdateGroupChatDialogMuteConfigResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBUpdateGroupChatDialogMuteConfigResp class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBUpdateGroupChatDialogMuteConfigResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBUpdateGroupChatDialogNotificationLevelReq

@implementation ACPBUpdateGroupChatDialogNotificationLevelReq

@dynamic destIdArray, destIdArray_Count;
@dynamic muteFlag;

typedef struct ACPBUpdateGroupChatDialogNotificationLevelReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t muteFlag;
  NSMutableArray *destIdArray;
} ACPBUpdateGroupChatDialogNotificationLevelReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "destIdArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdateGroupChatDialogNotificationLevelReq_FieldNumber_DestIdArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBUpdateGroupChatDialogNotificationLevelReq__storage_, destIdArray),
        .flags = (ACGPBFieldFlags)(ACGPBFieldRepeated | ACGPBFieldTextFormatNameCustom),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "muteFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdateGroupChatDialogNotificationLevelReq_FieldNumber_MuteFlag,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBUpdateGroupChatDialogNotificationLevelReq__storage_, muteFlag),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBUpdateGroupChatDialogNotificationLevelReq class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBUpdateGroupChatDialogNotificationLevelReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\000destId\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBUpdateGroupChatDialogNotificationLevelResp

@implementation ACPBUpdateGroupChatDialogNotificationLevelResp

@dynamic errorCode;
@dynamic errorMessage;

typedef struct ACPBUpdateGroupChatDialogNotificationLevelResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
} ACPBUpdateGroupChatDialogNotificationLevelResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdateGroupChatDialogNotificationLevelResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBUpdateGroupChatDialogNotificationLevelResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdateGroupChatDialogNotificationLevelResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBUpdateGroupChatDialogNotificationLevelResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBUpdateGroupChatDialogNotificationLevelResp class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBUpdateGroupChatDialogNotificationLevelResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBUpdateGroupChatDialogBlockConfigReq

@implementation ACPBUpdateGroupChatDialogBlockConfigReq

@dynamic groupId;
@dynamic blockFlag;

typedef struct ACPBUpdateGroupChatDialogBlockConfigReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
} ACPBUpdateGroupChatDialogBlockConfigReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdateGroupChatDialogBlockConfigReq_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBUpdateGroupChatDialogBlockConfigReq__storage_, groupId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "blockFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdateGroupChatDialogBlockConfigReq_FieldNumber_BlockFlag,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBUpdateGroupChatDialogBlockConfigReq class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBUpdateGroupChatDialogBlockConfigReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBUpdateGroupChatDialogBlockConfigResp

@implementation ACPBUpdateGroupChatDialogBlockConfigResp

@dynamic errorCode;
@dynamic errorMessage;

typedef struct ACPBUpdateGroupChatDialogBlockConfigResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
} ACPBUpdateGroupChatDialogBlockConfigResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdateGroupChatDialogBlockConfigResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBUpdateGroupChatDialogBlockConfigResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBUpdateGroupChatDialogBlockConfigResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBUpdateGroupChatDialogBlockConfigResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBUpdateGroupChatDialogBlockConfigResp class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBUpdateGroupChatDialogBlockConfigResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBRecallGroupChatMessageReq

@implementation ACPBRecallGroupChatMessageReq

@dynamic groupId;
@dynamic msgId;

typedef struct ACPBRecallGroupChatMessageReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  int64_t msgId;
} ACPBRecallGroupChatMessageReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBRecallGroupChatMessageReq_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBRecallGroupChatMessageReq__storage_, groupId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBRecallGroupChatMessageReq_FieldNumber_MsgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBRecallGroupChatMessageReq__storage_, msgId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBRecallGroupChatMessageReq class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBRecallGroupChatMessageReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBRecallGroupChatMessageResp

@implementation ACPBRecallGroupChatMessageResp

@dynamic errorCode;
@dynamic errorMessage;

typedef struct ACPBRecallGroupChatMessageResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
} ACPBRecallGroupChatMessageResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBRecallGroupChatMessageResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBRecallGroupChatMessageResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBRecallGroupChatMessageResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBRecallGroupChatMessageResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBRecallGroupChatMessageResp class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBRecallGroupChatMessageResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBStartTypingGroupChatReq

@implementation ACPBStartTypingGroupChatReq

@dynamic groupId;

typedef struct ACPBStartTypingGroupChatReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
} ACPBStartTypingGroupChatReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBStartTypingGroupChatReq_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBStartTypingGroupChatReq__storage_, groupId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBStartTypingGroupChatReq class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBStartTypingGroupChatReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBStartTypingGroupChatResp

@implementation ACPBStartTypingGroupChatResp

@dynamic errorCode;
@dynamic errorMessage;

typedef struct ACPBStartTypingGroupChatResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
} ACPBStartTypingGroupChatResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBStartTypingGroupChatResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBStartTypingGroupChatResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBStartTypingGroupChatResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBStartTypingGroupChatResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBStartTypingGroupChatResp class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBStartTypingGroupChatResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBEndTypingGroupChatReq

@implementation ACPBEndTypingGroupChatReq

@dynamic groupId;

typedef struct ACPBEndTypingGroupChatReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
} ACPBEndTypingGroupChatReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBEndTypingGroupChatReq_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBEndTypingGroupChatReq__storage_, groupId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBEndTypingGroupChatReq class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBEndTypingGroupChatReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBEndTypingGroupChatResp

@implementation ACPBEndTypingGroupChatResp

@dynamic errorCode;
@dynamic errorMessage;

typedef struct ACPBEndTypingGroupChatResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
} ACPBEndTypingGroupChatResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBEndTypingGroupChatResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBEndTypingGroupChatResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBEndTypingGroupChatResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBEndTypingGroupChatResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBEndTypingGroupChatResp class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBEndTypingGroupChatResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBGroupChatMessage

@implementation ACPBGroupChatMessage

@dynamic groupId;
@dynamic userId;
@dynamic msgIdArray, msgIdArray_Count;

typedef struct ACPBGroupChatMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  ACGPBInt64Array *msgIdArray;
  int64_t userId;
} ACPBGroupChatMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGroupChatMessage_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBGroupChatMessage__storage_, groupId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGroupChatMessage_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBGroupChatMessage__storage_, userId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "msgIdArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGroupChatMessage_FieldNumber_MsgIdArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBGroupChatMessage__storage_, msgIdArray),
        .flags = (ACGPBFieldFlags)(ACGPBFieldRepeated | ACGPBFieldPacked | ACGPBFieldTextFormatNameCustom),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBGroupChatMessage class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBGroupChatMessage__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\002\006\000\003\000msgId\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBSendGroupChatArrivalAckReq

@implementation ACPBSendGroupChatArrivalAckReq

@dynamic groupChatMessageArray, groupChatMessageArray_Count;

typedef struct ACPBSendGroupChatArrivalAckReq__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *groupChatMessageArray;
} ACPBSendGroupChatArrivalAckReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "groupChatMessageArray",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACPBGroupChatMessage),
        .number = ACPBSendGroupChatArrivalAckReq_FieldNumber_GroupChatMessageArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatArrivalAckReq__storage_, groupChatMessageArray),
        .flags = (ACGPBFieldFlags)(ACGPBFieldRepeated | ACGPBFieldTextFormatNameCustom),
        .dataType = ACGPBDataTypeMessage,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBSendGroupChatArrivalAckReq class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBSendGroupChatArrivalAckReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000groupChatMessage\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBSendGroupChatArrivalAckResp

@implementation ACPBSendGroupChatArrivalAckResp

@dynamic errorCode;
@dynamic errorMessage;

typedef struct ACPBSendGroupChatArrivalAckResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
} ACPBSendGroupChatArrivalAckResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatArrivalAckResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatArrivalAckResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatArrivalAckResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatArrivalAckResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBSendGroupChatArrivalAckResp class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBSendGroupChatArrivalAckResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBSendGroupChatReadAckReq

@implementation ACPBSendGroupChatReadAckReq

@dynamic groupChatMessageArray, groupChatMessageArray_Count;

typedef struct ACPBSendGroupChatReadAckReq__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *groupChatMessageArray;
} ACPBSendGroupChatReadAckReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "groupChatMessageArray",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACPBGroupChatMessage),
        .number = ACPBSendGroupChatReadAckReq_FieldNumber_GroupChatMessageArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatReadAckReq__storage_, groupChatMessageArray),
        .flags = (ACGPBFieldFlags)(ACGPBFieldRepeated | ACGPBFieldTextFormatNameCustom),
        .dataType = ACGPBDataTypeMessage,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBSendGroupChatReadAckReq class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBSendGroupChatReadAckReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000groupChatMessage\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBSendGroupChatReadAckResp

@implementation ACPBSendGroupChatReadAckResp

@dynamic errorCode;
@dynamic errorMessage;

typedef struct ACPBSendGroupChatReadAckResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
} ACPBSendGroupChatReadAckResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatReadAckResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatReadAckResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBSendGroupChatReadAckResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBSendGroupChatReadAckResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBSendGroupChatReadAckResp class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBSendGroupChatReadAckResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBGetNewSharingGroupMessageReq

@implementation ACPBGetNewSharingGroupMessageReq

@dynamic groupId;
@dynamic offset;
@dynamic rows;

typedef struct ACPBGetNewSharingGroupMessageReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t rows;
  NSString *groupId;
  int64_t offset;
} ACPBGetNewSharingGroupMessageReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetNewSharingGroupMessageReq_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBGetNewSharingGroupMessageReq__storage_, groupId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "offset",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetNewSharingGroupMessageReq_FieldNumber_Offset,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBGetNewSharingGroupMessageReq__storage_, offset),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "rows",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetNewSharingGroupMessageReq_FieldNumber_Rows,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBGetNewSharingGroupMessageReq__storage_, rows),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBGetNewSharingGroupMessageReq class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBGetNewSharingGroupMessageReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBGetNewSharingGroupMessageResp

@implementation ACPBGetNewSharingGroupMessageResp

@dynamic errorCode;
@dynamic errorMessage;
@dynamic seqno;
@dynamic dialogMessageArray, dialogMessageArray_Count;
@dynamic reference, reference_Count;
@dynamic endOffset;

typedef struct ACPBGetNewSharingGroupMessageResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
  NSMutableArray *dialogMessageArray;
  NSMutableDictionary *reference;
  int64_t seqno;
  int64_t endOffset;
} ACPBGetNewSharingGroupMessageResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetNewSharingGroupMessageResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBGetNewSharingGroupMessageResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetNewSharingGroupMessageResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBGetNewSharingGroupMessageResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "seqno",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetNewSharingGroupMessageResp_FieldNumber_Seqno,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBGetNewSharingGroupMessageResp__storage_, seqno),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "dialogMessageArray",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACPBDialogMessage),
        .number = ACPBGetNewSharingGroupMessageResp_FieldNumber_DialogMessageArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBGetNewSharingGroupMessageResp__storage_, dialogMessageArray),
        .flags = (ACGPBFieldFlags)(ACGPBFieldRepeated | ACGPBFieldTextFormatNameCustom),
        .dataType = ACGPBDataTypeMessage,
      },
      {
        .name = "reference",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACPBReferenceDialogMessage),
        .number = ACPBGetNewSharingGroupMessageResp_FieldNumber_Reference,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACPBGetNewSharingGroupMessageResp__storage_, reference),
        .flags = ACGPBFieldMapKeyString,
        .dataType = ACGPBDataTypeMessage,
      },
      {
        .name = "endOffset",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBGetNewSharingGroupMessageResp_FieldNumber_EndOffset,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACPBGetNewSharingGroupMessageResp__storage_, endOffset),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBGetNewSharingGroupMessageResp class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBGetNewSharingGroupMessageResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\t\000\002\014\000\004\000dialogMessage\000\006\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBDeleteGroupChatDialogReq

@implementation ACPBDeleteGroupChatDialogReq

@dynamic groupId;

typedef struct ACPBDeleteGroupChatDialogReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
} ACPBDeleteGroupChatDialogReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBDeleteGroupChatDialogReq_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBDeleteGroupChatDialogReq__storage_, groupId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBDeleteGroupChatDialogReq class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBDeleteGroupChatDialogReq__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBDeleteGroupChatDialogResp

@implementation ACPBDeleteGroupChatDialogResp

@dynamic errorCode;
@dynamic errorMessage;
@dynamic notification;

typedef struct ACPBDeleteGroupChatDialogResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMessage;
  NSString *notification;
} ACPBDeleteGroupChatDialogResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBDeleteGroupChatDialogResp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBDeleteGroupChatDialogResp__storage_, errorCode),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBDeleteGroupChatDialogResp_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBDeleteGroupChatDialogResp__storage_, errorMessage),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "notification",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBDeleteGroupChatDialogResp_FieldNumber_Notification,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBDeleteGroupChatDialogResp__storage_, notification),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBDeleteGroupChatDialogResp class]
                                     rootClass:[AcpbGroupchatRoot class]
                                          file:AcpbGroupchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBDeleteGroupChatDialogResp__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
