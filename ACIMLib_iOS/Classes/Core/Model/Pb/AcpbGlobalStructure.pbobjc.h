// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: acpb.global.structure.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(ACGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define ACGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if ACGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/ACGPBProtocolBuffers.h>
#else
 #import "ACGPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - AcpbGlobalStructureRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (ACGPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c ACGPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
ACGPB_FINAL @interface AcpbGlobalStructureRoot : ACGPBRootObject
@end

#pragma mark - ACPBBaseResp

typedef ACGPB_ENUM(ACPBBaseResp_FieldNumber) {
  ACPBBaseResp_FieldNumber_ErrorCode = 1,
  ACPBBaseResp_FieldNumber_ErrorMessage = 2,
};

/**
 * 响应基类
 **/
ACGPB_FINAL @interface ACPBBaseResp : ACGPBMessage

@property(nonatomic, readwrite) int32_t errorCode;

@property(nonatomic, readwrite, copy, null_resettable) NSString *errorMessage;

@end

#pragma mark - ACPBAesKeyAndIV

typedef ACGPB_ENUM(ACPBAesKeyAndIV_FieldNumber) {
  ACPBAesKeyAndIV_FieldNumber_AesKey = 1,
  ACPBAesKeyAndIV_FieldNumber_AesIv = 2,
};

/**
 * AES KEY and IV
 **/
ACGPB_FINAL @interface ACPBAesKeyAndIV : ACGPBMessage

/** aes CBC Key */
@property(nonatomic, readwrite, copy, null_resettable) NSString *aesKey;

/** aes CBC IV */
@property(nonatomic, readwrite, copy, null_resettable) NSString *aesIv;

@end

#pragma mark - ACPBSystemCurrentTimeMillisReq

/**
 * 获取系统的时间(毫秒数)
 **/
ACGPB_FINAL @interface ACPBSystemCurrentTimeMillisReq : ACGPBMessage

@end

#pragma mark - ACPBSystemCurrentTimeMillisResp

typedef ACGPB_ENUM(ACPBSystemCurrentTimeMillisResp_FieldNumber) {
  ACPBSystemCurrentTimeMillisResp_FieldNumber_ErrorCode = 1,
  ACPBSystemCurrentTimeMillisResp_FieldNumber_ErrorMessage = 2,
  ACPBSystemCurrentTimeMillisResp_FieldNumber_CurrentTimeMillis = 3,
};

ACGPB_FINAL @interface ACPBSystemCurrentTimeMillisResp : ACGPBMessage

/** SystemCurrentTimeMillisRespCmdId = 0x10008006; */
@property(nonatomic, readwrite) int32_t errorCode;

@property(nonatomic, readwrite, copy, null_resettable) NSString *errorMessage;

/** 服务器端当前的时间(毫秒数) */
@property(nonatomic, readwrite) int64_t currentTimeMillis;

@end

#pragma mark - ACPBDialogMessage

typedef ACGPB_ENUM(ACPBDialogMessage_FieldNumber) {
  ACPBDialogMessage_FieldNumber_MsgId = 1,
  ACPBDialogMessage_FieldNumber_LocalId = 2,
  ACPBDialogMessage_FieldNumber_MsgStatus = 3,
  ACPBDialogMessage_FieldNumber_SrcId = 4,
  ACPBDialogMessage_FieldNumber_DestId = 5,
  ACPBDialogMessage_FieldNumber_IsOut = 6,
  ACPBDialogMessage_FieldNumber_SenderCategory = 7,
  ACPBDialogMessage_FieldNumber_MsgCategory = 8,
  ACPBDialogMessage_FieldNumber_MsgPreContent = 9,
  ACPBDialogMessage_FieldNumber_MsgPostContent = 10,
  ACPBDialogMessage_FieldNumber_MediaFlag = 11,
  ACPBDialogMessage_FieldNumber_MediaConstructor = 12,
  ACPBDialogMessage_FieldNumber_MediaAttribute = 13,
  ACPBDialogMessage_FieldNumber_MsgSendTime = 14,
  ACPBDialogMessage_FieldNumber_BurnAfterReadingFlag = 15,
  ACPBDialogMessage_FieldNumber_AtFlag = 16,
  ACPBDialogMessage_FieldNumber_ReplyFlag = 17,
  ACPBDialogMessage_FieldNumber_ReferenceFlag = 18,
  ACPBDialogMessage_FieldNumber_MsgIdReferenced = 19,
  ACPBDialogMessage_FieldNumber_UploadFlag = 20,
  ACPBDialogMessage_FieldNumber_BurnAfterReadingTime = 21,
  ACPBDialogMessage_FieldNumber_SharingGroupFlag = 22,
  ACPBDialogMessage_FieldNumber_Seqno = 23,
  ACPBDialogMessage_FieldNumber_Extra = 24,
  ACPBDialogMessage_FieldNumber_MsgContent = 25,
  ACPBDialogMessage_FieldNumber_ObjectName = 26,
};

/**
 * 会话消息
 **/
ACGPB_FINAL @interface ACPBDialogMessage : ACGPBMessage

/** 消息在服务器端分配的id */
@property(nonatomic, readwrite) int64_t msgId;

/** app端分配的消息id 仅对发件人有意义，对收件人来说该值为0 */
@property(nonatomic, readwrite) int64_t localId;

/** msg状态（显示回执等需要） */
@property(nonatomic, readwrite) int32_t msgStatus;

/** 消息发件人uid */
@property(nonatomic, readwrite) int64_t srcId;

/** 消息收件人uid */
@property(nonatomic, readwrite) int64_t destId;

/** true表示发送出去的消息，false表示接收进来的消息 */
@property(nonatomic, readwrite) BOOL isOut;

/** 发件人类型 1为系统消息 8自己 9聊天伙伴 */
@property(nonatomic, readwrite) int32_t senderCategory;

/** 消息类别 1:直接发送 2:reply 3:forward */
@property(nonatomic, readwrite) int32_t msgCategory;

/** 消息的前置内容 (如果没有多媒体内容，preContent传空值，统一使用postContent) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *msgPreContent;

/** 消息的后置内容 (如果没有多媒体内容，请使用这个字段) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *msgPostContent;

/** 是否有多媒体内容 */
@property(nonatomic, readwrite) BOOL mediaFlag;

/** 消息中包涵的多媒体类型 取值为XLMediaObject其相应的constructor */
@property(nonatomic, readwrite) int32_t mediaConstructor;

/** 多媒体属性的JSON格式（废弃） */
@property(nonatomic, readwrite, copy, null_resettable) NSString *mediaAttribute;

/** 消息发送的时间 */
@property(nonatomic, readwrite) int64_t msgSendTime;

/** 该消息是否属于"阅后即焚" */
@property(nonatomic, readwrite) BOOL burnAfterReadingFlag;

/** 单聊时永远为false 群聊时如为true则表示该消息在at我 */
@property(nonatomic, readwrite) BOOL atFlag;

/** 该消息是否在回复我 */
@property(nonatomic, readwrite) BOOL replyFlag;

/** 是否有关联消息(reply or foward) */
@property(nonatomic, readwrite) BOOL referenceFlag;

/** 关联消息的id */
@property(nonatomic, readwrite) int64_t msgIdReferenced;

@property(nonatomic, readwrite) BOOL uploadFlag;

/** 当burnAfterReadingFlag为true的时候才有意义,阅后即焚时间 */
@property(nonatomic, readwrite) int64_t burnAfterReadingTime;

/** 是否是共享群消息 */
@property(nonatomic, readwrite) BOOL sharingGroupFlag;

/** 消息序号 */
@property(nonatomic, readwrite) int64_t seqno;

/** 附加信息 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *extra;

/** 多媒体属性的二进制格式 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *msgContent;

@property(nonatomic, readwrite, copy, null_resettable) NSString *objectName;

@end

#pragma mark - ACPBReferenceDialogMessage

typedef ACGPB_ENUM(ACPBReferenceDialogMessage_FieldNumber) {
  ACPBReferenceDialogMessage_FieldNumber_MsgId = 1,
  ACPBReferenceDialogMessage_FieldNumber_SrcId = 2,
  ACPBReferenceDialogMessage_FieldNumber_SrcName = 3,
  ACPBReferenceDialogMessage_FieldNumber_DestId = 4,
  ACPBReferenceDialogMessage_FieldNumber_DestName = 5,
  ACPBReferenceDialogMessage_FieldNumber_MsgPreContent = 6,
  ACPBReferenceDialogMessage_FieldNumber_MsgPostContent = 7,
  ACPBReferenceDialogMessage_FieldNumber_MediaFlag = 8,
  ACPBReferenceDialogMessage_FieldNumber_MediaConstructor = 9,
  ACPBReferenceDialogMessage_FieldNumber_MediaAttribute = 10,
  ACPBReferenceDialogMessage_FieldNumber_MsgSendTime = 11,
};

/**
 * 被引用的会话消息，用于reply/forward场景，和DialogMessage区别是：
 * (a) 添加一部分展示需要的信息(比如发件人收件人的名字)
 * (b) 去除一部分没必要的信息(localId/msgStatus/atFlag/replyFlag... 及这个消息本身引用的信息）
 **/
ACGPB_FINAL @interface ACPBReferenceDialogMessage : ACGPBMessage

/** 消息在服务器端分配的id */
@property(nonatomic, readwrite) int64_t msgId;

/** 消息发件人uid */
@property(nonatomic, readwrite) int64_t srcId;

/** 消息发件人名字 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *srcName;

/** 消息收件人uid */
@property(nonatomic, readwrite) int64_t destId;

/** 消息收件人名字 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *destName;

/** 消息的前置内容 (如果没有多媒体内容，preContent传空值，统一使用postContent) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *msgPreContent;

/** 消息的后置内容 (如果没有多媒体内容，请使用这个字段) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *msgPostContent;

/** 是否有多媒体内容 */
@property(nonatomic, readwrite) BOOL mediaFlag;

/** 消息中包涵的多媒体类型 取值为XLMediaObject其相应的constructor */
@property(nonatomic, readwrite) int32_t mediaConstructor;

/** 多媒体属性的JSON格式 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *mediaAttribute;

/** 消息发送的时间 */
@property(nonatomic, readwrite) int64_t msgSendTime;

@end

#pragma mark - ACPBBriefDialogMessage

typedef ACGPB_ENUM(ACPBBriefDialogMessage_FieldNumber) {
  ACPBBriefDialogMessage_FieldNumber_SrcId = 1,
  ACPBBriefDialogMessage_FieldNumber_SrcName = 2,
  ACPBBriefDialogMessage_FieldNumber_GroupFlag = 3,
  ACPBBriefDialogMessage_FieldNumber_GroupId = 4,
  ACPBBriefDialogMessage_FieldNumber_GroupTitle = 5,
  ACPBBriefDialogMessage_FieldNumber_MsgSendTime = 6,
  ACPBBriefDialogMessage_FieldNumber_AtFlag = 7,
};

/**
 * 简要的会话消息，主要做消息GCM推送时用
 **/
ACGPB_FINAL @interface ACPBBriefDialogMessage : ACGPBMessage

/** 消息发件人id */
@property(nonatomic, readwrite) int64_t srcId;

/** 消息发件人名字 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *srcName;

/** 是不是群消息 */
@property(nonatomic, readwrite) BOOL groupFlag;

/** 如是群消息，对应的groupId */
@property(nonatomic, readwrite) int64_t groupId;

/** 群名字 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupTitle;

/** 消息发送的时间 */
@property(nonatomic, readwrite) int64_t msgSendTime;

/** 如果是群消息，该消息是否在at收件人 */
@property(nonatomic, readwrite) BOOL atFlag;

@end

#pragma mark - ACPBFullDialog

typedef ACGPB_ENUM(ACPBFullDialog_FieldNumber) {
  ACPBFullDialog_FieldNumber_DestId = 1,
  ACPBFullDialog_FieldNumber_DialogTitle = 2,
  ACPBFullDialog_FieldNumber_SmallAvatarURL = 3,
  ACPBFullDialog_FieldNumber_BackgroundImage = 4,
  ACPBFullDialog_FieldNumber_StickyFlag = 5,
  ACPBFullDialog_FieldNumber_MuteFlag = 6,
  ACPBFullDialog_FieldNumber_BlockFlag = 7,
  ACPBFullDialog_FieldNumber_BurnAfterReadingFlag = 8,
  ACPBFullDialog_FieldNumber_TakeScreenshotFlag = 9,
  ACPBFullDialog_FieldNumber_GroupFlag = 10,
  ACPBFullDialog_FieldNumber_TotalMemberNumber = 11,
  ACPBFullDialog_FieldNumber_GroupMemberSmallAvatarURLArray = 12,
  ACPBFullDialog_FieldNumber_BurnAfterReadingTime = 13,
};

/**
 * *
 * 会话详情 (app进入会话列表时会拉取这个对象)
 * 几个术语约定: offset: (a) 在req中，表示app端保存的消息偏移量 (b) 在resp中，表示服务器端返回的新消息中，最新一条消息的偏移量
 * seqno: 服务器端最新消息序号;  groupId: 上下文明确为群聊的情况下，使用groupId更清晰
 **/
ACGPB_FINAL @interface ACPBFullDialog : ACGPBMessage

/** 目标id: 单聊时是对方uid, 群聊时是groupId, 需要根据groupFlag来判断 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *destId;

/** 单聊时是对方名称, 群聊时是groupTitle */
@property(nonatomic, readwrite, copy, null_resettable) NSString *dialogTitle;

/** 头像缩略图 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *smallAvatarURL;

/** 背景图 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *backgroundImage;

/** 是否置顶 */
@property(nonatomic, readwrite) BOOL stickyFlag;

/** 是否免打扰 */
@property(nonatomic, readwrite) BOOL muteFlag;

/** 是否拉黑 */
@property(nonatomic, readwrite) BOOL blockFlag;

/** 是否开启阅后即焚 */
@property(nonatomic, readwrite) BOOL burnAfterReadingFlag;

/** 是否开启截屏通知 */
@property(nonatomic, readwrite) BOOL takeScreenshotFlag;

/** 是否群聊 */
@property(nonatomic, readwrite) BOOL groupFlag;

/** 总人数 */
@property(nonatomic, readwrite) int32_t totalMemberNumber;

/** 群成员的头像url列表，严格按照成员在群里面的顺序，返回前9个群成员的头像连接 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *groupMemberSmallAvatarURLArray;
/** The number of items in @c groupMemberSmallAvatarURLArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger groupMemberSmallAvatarURLArray_Count;

/** 当burnAfterReadingFlag为true的时候才有意义,阅后即焚时间 */
@property(nonatomic, readwrite) int64_t burnAfterReadingTime;

@end

#pragma mark - ACPBBriefDialog

typedef ACGPB_ENUM(ACPBBriefDialog_FieldNumber) {
  ACPBBriefDialog_FieldNumber_DestId = 1,
  ACPBBriefDialog_FieldNumber_DialogTitle = 2,
  ACPBBriefDialog_FieldNumber_SmallAvatarURL = 3,
  ACPBBriefDialog_FieldNumber_BackgroundImage = 4,
  ACPBBriefDialog_FieldNumber_StickyFlag = 5,
  ACPBBriefDialog_FieldNumber_MuteFlag = 6,
  ACPBBriefDialog_FieldNumber_BlockFlag = 7,
  ACPBBriefDialog_FieldNumber_BurnAfterReadingFlag = 8,
  ACPBBriefDialog_FieldNumber_TakeScreenshotFlag = 9,
  ACPBBriefDialog_FieldNumber_GroupFlag = 10,
  ACPBBriefDialog_FieldNumber_TotalMemberNumber = 11,
  ACPBBriefDialog_FieldNumber_GroupMemberSmallAvatarURLArray = 12,
  ACPBBriefDialog_FieldNumber_BurnAfterReadingTime = 13,
  ACPBBriefDialog_FieldNumber_DialogMenuContent = 14,
  ACPBBriefDialog_FieldNumber_PushNotificationLevel = 15,
};

/**
 * *
 * 会话概要 (比如: 突然收到新会话时 进行拉取，比如新建的群)
 **/
ACGPB_FINAL @interface ACPBBriefDialog : ACGPBMessage

/** 目标id: 单聊时是对方uid, 群聊时是groupId, 需要根据groupFlag来判断 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *destId;

/** 单聊时是对方名称, 群聊时是groupTitle */
@property(nonatomic, readwrite, copy, null_resettable) NSString *dialogTitle;

/** 头像缩略图 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *smallAvatarURL;

/** 背景图 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *backgroundImage;

/** 是否置顶 */
@property(nonatomic, readwrite) BOOL stickyFlag;

/** 是否免打扰 */
@property(nonatomic, readwrite) BOOL muteFlag;

/** 是否拉黑 */
@property(nonatomic, readwrite) BOOL blockFlag;

/** 是否开启阅后即焚 */
@property(nonatomic, readwrite) BOOL burnAfterReadingFlag;

/** 是否开启截屏通知 */
@property(nonatomic, readwrite) BOOL takeScreenshotFlag;

/** 是否群聊 */
@property(nonatomic, readwrite) BOOL groupFlag;

/** 总人数 */
@property(nonatomic, readwrite) int32_t totalMemberNumber;

/** 群成员的头像url列表，严格按照成员在群里面的顺序，返回前9个群成员的头像连接 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *groupMemberSmallAvatarURLArray;
/** The number of items in @c groupMemberSmallAvatarURLArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger groupMemberSmallAvatarURLArray_Count;

/** 当burnAfterReadingFlag为true的时候才有意义,阅后即焚时间 */
@property(nonatomic, readwrite) int64_t burnAfterReadingTime;

/** 用于公众号菜单项 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *dialogMenuContent;

/** 免干扰级别 */
@property(nonatomic, readwrite) int32_t pushNotificationLevel;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
