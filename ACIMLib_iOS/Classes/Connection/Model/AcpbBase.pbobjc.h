// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: acpb.base.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(ACGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define ACGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if ACGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/ACGPBProtocolBuffers.h>
#else
 #import "ACGPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class ACPBAesKeyAndIVPrivate;
@class ACPBConfigItem;
@class ACPBUser;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - AcpbBaseRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (ACGPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c ACGPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
ACGPB_FINAL @interface AcpbBaseRoot : ACGPBRootObject
@end

#pragma mark - ACPBHeartbeatReq

typedef ACGPB_ENUM(ACPBHeartbeatReq_FieldNumber) {
  ACPBHeartbeatReq_FieldNumber_PingId = 1,
  ACPBHeartbeatReq_FieldNumber_DisconnectDelay = 2,
};

/**
 * 心跳请求
 **/
ACGPB_FINAL @interface ACPBHeartbeatReq : ACGPBMessage

/** HeartbeatReqCmdId  = 0x10001001; */
@property(nonatomic, readwrite) int64_t pingId;

/** 超时时间（如果下一次的ping间隔大于这个，服务端就可以断连） */
@property(nonatomic, readwrite) int64_t disconnectDelay;

@end

#pragma mark - ACPBHeartbeatResp

typedef ACGPB_ENUM(ACPBHeartbeatResp_FieldNumber) {
  ACPBHeartbeatResp_FieldNumber_ErrorCode = 1,
  ACPBHeartbeatResp_FieldNumber_ErrorMessage = 2,
  ACPBHeartbeatResp_FieldNumber_PingId = 3,
};

ACGPB_FINAL @interface ACPBHeartbeatResp : ACGPBMessage

/** HeartbeatRespCmdId = 0x10008001; */
@property(nonatomic, readwrite) int32_t errorCode;

@property(nonatomic, readwrite, copy, null_resettable) NSString *errorMessage;

/** ping的ack */
@property(nonatomic, readwrite) int64_t pingId;

@end

#pragma mark - ACPBHandshakeReq

typedef ACGPB_ENUM(ACPBHandshakeReq_FieldNumber) {
  ACPBHandshakeReq_FieldNumber_PubKey = 1,
  ACPBHandshakeReq_FieldNumber_Timestamp = 2,
  ACPBHandshakeReq_FieldNumber_PubkeyIndex = 3,
  ACPBHandshakeReq_FieldNumber_Sign = 4,
};

/**
 * 握手请求
 **/
ACGPB_FINAL @interface ACPBHandshakeReq : ACGPBMessage

/** HandshakeReqCmdId  = 0x10001003; */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pubKey;

/** 时间戳 */
@property(nonatomic, readwrite) int64_t timestamp;

/** 公钥索引 */
@property(nonatomic, readwrite) int32_t pubkeyIndex;

/** 签名 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sign;

@end

#pragma mark - ACPBHandshakeResp

typedef ACGPB_ENUM(ACPBHandshakeResp_FieldNumber) {
  ACPBHandshakeResp_FieldNumber_ErrorCode = 1,
  ACPBHandshakeResp_FieldNumber_ErrorMessage = 2,
  ACPBHandshakeResp_FieldNumber_PubKey = 3,
  ACPBHandshakeResp_FieldNumber_Nonce = 4,
  ACPBHandshakeResp_FieldNumber_Sign = 5,
};

ACGPB_FINAL @interface ACPBHandshakeResp : ACGPBMessage

/** HandshakeRespCmdId = 0x10008003; */
@property(nonatomic, readwrite) int32_t errorCode;

@property(nonatomic, readwrite, copy, null_resettable) NSString *errorMessage;

/** 公钥 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pubKey;

/** 随机值 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *nonce;

/** 签名 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sign;

@end

#pragma mark - ACPBConfirmHandshakeReq

typedef ACGPB_ENUM(ACPBConfirmHandshakeReq_FieldNumber) {
  ACPBConfirmHandshakeReq_FieldNumber_PubKey = 1,
  ACPBConfirmHandshakeReq_FieldNumber_Timestamp = 2,
  ACPBConfirmHandshakeReq_FieldNumber_PubkeyIndex = 3,
  ACPBConfirmHandshakeReq_FieldNumber_Sign = 4,
};

/**
 * 确认握手请求
 **/
ACGPB_FINAL @interface ACPBConfirmHandshakeReq : ACGPBMessage

/** ConfirmHandshakeReqCmdId  = 0x10001004; */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pubKey;

/** 时间戳 */
@property(nonatomic, readwrite) int64_t timestamp;

/** 公钥索引 */
@property(nonatomic, readwrite) int32_t pubkeyIndex;

/** 签名 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sign;

@end

#pragma mark - ACPBConfirmHandshakeResp

typedef ACGPB_ENUM(ACPBConfirmHandshakeResp_FieldNumber) {
  ACPBConfirmHandshakeResp_FieldNumber_ErrorCode = 1,
  ACPBConfirmHandshakeResp_FieldNumber_ErrorMessage = 2,
  ACPBConfirmHandshakeResp_FieldNumber_Timestamp = 3,
};

ACGPB_FINAL @interface ACPBConfirmHandshakeResp : ACGPBMessage

/** ConfirmHandshakeRespCmdId = 0x10008004; */
@property(nonatomic, readwrite) int32_t errorCode;

@property(nonatomic, readwrite, copy, null_resettable) NSString *errorMessage;

/** 时间戳 */
@property(nonatomic, readwrite) int64_t timestamp;

@end

#pragma mark - ACPBAuthSignIn2TokenReq

typedef ACGPB_ENUM(ACPBAuthSignIn2TokenReq_FieldNumber) {
  ACPBAuthSignIn2TokenReq_FieldNumber_Token = 1,
  ACPBAuthSignIn2TokenReq_FieldNumber_DeviceType = 2,
  ACPBAuthSignIn2TokenReq_FieldNumber_Imei = 3,
  ACPBAuthSignIn2TokenReq_FieldNumber_Brand = 4,
  ACPBAuthSignIn2TokenReq_FieldNumber_Model = 5,
  ACPBAuthSignIn2TokenReq_FieldNumber_ApnsToken = 6,
  ACPBAuthSignIn2TokenReq_FieldNumber_BandId = 7,
  ACPBAuthSignIn2TokenReq_FieldNumber_SdkVsersion = 8,
};

/**
 * 通过token登录请求
 **/
ACGPB_FINAL @interface ACPBAuthSignIn2TokenReq : ACGPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *token;

/** 终端类型 1:安卓 2:iOS 7:web 8:pc */
@property(nonatomic, readwrite) int32_t deviceType;

/** 手机串号 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *imei;

/** 手机品牌 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *brand;

/** 手机型号 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *model;

/** apns推送时需要的token */
@property(nonatomic, readwrite, copy, null_resettable) NSString *apnsToken;

/** ios登录带bandId */
@property(nonatomic, readwrite, copy, null_resettable) NSString *bandId;

/** sdk版本 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sdkVsersion;

@end

#pragma mark - ACPBAuthSignIn2TokenResp

typedef ACGPB_ENUM(ACPBAuthSignIn2TokenResp_FieldNumber) {
  ACPBAuthSignIn2TokenResp_FieldNumber_ErrorCode = 1,
  ACPBAuthSignIn2TokenResp_FieldNumber_ErrorMessage = 2,
  ACPBAuthSignIn2TokenResp_FieldNumber_DeviceId = 3,
  ACPBAuthSignIn2TokenResp_FieldNumber_SessionId = 4,
  ACPBAuthSignIn2TokenResp_FieldNumber_NoNickName = 5,
  ACPBAuthSignIn2TokenResp_FieldNumber_NoEmail = 6,
  ACPBAuthSignIn2TokenResp_FieldNumber_Cert = 7,
  ACPBAuthSignIn2TokenResp_FieldNumber_BodyAes = 8,
  ACPBAuthSignIn2TokenResp_FieldNumber_UserFileDomain = 9,
  ACPBAuthSignIn2TokenResp_FieldNumber_DialogFileDomain = 10,
  ACPBAuthSignIn2TokenResp_FieldNumber_User = 11,
  ACPBAuthSignIn2TokenResp_FieldNumber_ConfigItemListArray = 12,
  ACPBAuthSignIn2TokenResp_FieldNumber_FrozenDays = 13,
  ACPBAuthSignIn2TokenResp_FieldNumber_FileDomain = 14,
  ACPBAuthSignIn2TokenResp_FieldNumber_LogReportEndpoint = 15,
};

ACGPB_FINAL @interface ACPBAuthSignIn2TokenResp : ACGPBMessage

@property(nonatomic, readwrite) int32_t errorCode;

@property(nonatomic, readwrite, copy, null_resettable) NSString *errorMessage;

/** 对应协议header中的deviceId */
@property(nonatomic, readwrite) int64_t deviceId;

/** 对应 协议header中的sessionId */
@property(nonatomic, readwrite) int64_t sessionId;

/** 用户是否没设置昵称 */
@property(nonatomic, readwrite) BOOL noNickName;

/** 用户是否没设置邮件 */
@property(nonatomic, readwrite) BOOL noEmail;

/** 文件上传key */
@property(nonatomic, readwrite, copy, null_resettable) NSString *cert;

/** body AES Key/IV */
@property(nonatomic, readwrite, strong, null_resettable) ACPBAesKeyAndIVPrivate *bodyAes;
/** Test to see if @c bodyAes has been set. */
@property(nonatomic, readwrite) BOOL hasBodyAes;

/** （sugram没有用到这个字段）访问用户文件的域名（比如 头像/...） 通常是CDN域名 需带"/"结尾 比如: http://cdn.xianliao.com/ */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userFileDomain;

/** （sugram没有用到这个字段）访问聊天文件的域名（比如语音|图片|视频/...） 通常是CDN域名 需带"/"结尾 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *dialogFileDomain;

/** 用户信息 */
@property(nonatomic, readwrite, strong, null_resettable) ACPBUser *user;
/** Test to see if @c user has been set. */
@property(nonatomic, readwrite) BOOL hasUser;

/** 返回部分必要用户配置 比如gameId/redpacket url等 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ACPBConfigItem*> *configItemListArray;
/** The number of items in @c configItemListArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger configItemListArray_Count;

/** 封禁剩余天数 -1代表永封 0代表未封禁 */
@property(nonatomic, readwrite) int32_t frozenDays;

/** 文件上传host */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fileDomain;

/** 日志上传地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *logReportEndpoint;

@end

#pragma mark - ACPBAesKeyAndIVPrivate

typedef ACGPB_ENUM(ACPBAesKeyAndIVPrivate_FieldNumber) {
  ACPBAesKeyAndIVPrivate_FieldNumber_AesKey = 1,
  ACPBAesKeyAndIVPrivate_FieldNumber_AesIv = 2,
};

/**
 * AES KEY and IV
 **/
ACGPB_FINAL @interface ACPBAesKeyAndIVPrivate : ACGPBMessage

/** aes CBC Key */
@property(nonatomic, readwrite, copy, null_resettable) NSString *aesKey;

/** aes CBC IV */
@property(nonatomic, readwrite, copy, null_resettable) NSString *aesIv;

@end

#pragma mark - ACPBUser

typedef ACGPB_ENUM(ACPBUser_FieldNumber) {
  ACPBUser_FieldNumber_Uid = 1,
  ACPBUser_FieldNumber_NickName = 2,
  ACPBUser_FieldNumber_LangCode = 3,
  ACPBUser_FieldNumber_Phone = 4,
  ACPBUser_FieldNumber_NumberInPhoneBook = 5,
  ACPBUser_FieldNumber_SmallAvatarURL = 6,
  ACPBUser_FieldNumber_OriginalAvatarURL = 7,
  ACPBUser_FieldNumber_Email = 8,
  ACPBUser_FieldNumber_QrcodeString = 9,
  ACPBUser_FieldNumber_Gender = 10,
  ACPBUser_FieldNumber_ContactStatus = 11,
  ACPBUser_FieldNumber_Alias = 12,
  ACPBUser_FieldNumber_AliasMobileArray = 13,
  ACPBUser_FieldNumber_AliasDesp = 14,
  ACPBUser_FieldNumber_DialogMenuContent = 15,
  ACPBUser_FieldNumber_ChatRobotType = 16,
};

/**
 * 用户
 **/
ACGPB_FINAL @interface ACPBUser : ACGPBMessage

/** 用户唯一标识 */
@property(nonatomic, readwrite) int64_t uid;

/** 用户名 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *nickName;

/** 国家手机代码 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *langCode;

/** 用户注册IM时使用填写手机号码 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *phone;

/** 用户在手机通讯录中的号码 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *numberInPhoneBook;

/** 头像缩略图 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *smallAvatarURL;

/** 头像原图 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *originalAvatarURL;

/** 用户邮箱 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *email;

/** 二维码 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *qrcodeString;

/** 用户性别 0未设定 1男 2女 */
@property(nonatomic, readwrite) int32_t gender;

/** 通讯录状态，1:未添加, 5:已添加 */
@property(nonatomic, readwrite) int32_t contactStatus;

/** 用户别名 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *alias;

/** 备注电话号码列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *aliasMobileArray;
/** The number of items in @c aliasMobileArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger aliasMobileArray_Count;

/** 备注描述 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *aliasDesp;

/** 公众号对话菜单项 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *dialogMenuContent;

/** 公众号类型，如果是公众号的话 1-普通 2-全推类型 */
@property(nonatomic, readwrite) int32_t chatRobotType;

@end

#pragma mark - ACPBConfigItem

typedef ACGPB_ENUM(ACPBConfigItem_FieldNumber) {
  ACPBConfigItem_FieldNumber_Key = 1,
  ACPBConfigItem_FieldNumber_Value = 2,
};

/**
 * user configuration item
 **/
ACGPB_FINAL @interface ACPBConfigItem : ACGPBMessage

/** configuration key */
@property(nonatomic, readwrite, copy, null_resettable) NSString *key;

/** configuration value */
@property(nonatomic, readwrite, copy, null_resettable) NSString *value;

@end

#pragma mark - ACPBAuthLogOutReq

typedef ACGPB_ENUM(ACPBAuthLogOutReq_FieldNumber) {
  ACPBAuthLogOutReq_FieldNumber_AppVersionCode = 1,
  ACPBAuthLogOutReq_FieldNumber_DeviceType = 2,
  ACPBAuthLogOutReq_FieldNumber_Imei = 3,
  ACPBAuthLogOutReq_FieldNumber_Brand = 4,
  ACPBAuthLogOutReq_FieldNumber_Model = 5,
};

/**
 * 退出登录 从login模块迁移过来
 **/
ACGPB_FINAL @interface ACPBAuthLogOutReq : ACGPBMessage

/** AuthLogOutReqCmdId  = 0x30011004; */
@property(nonatomic, readwrite) int32_t appVersionCode;

/** 1:安卓 2:iOS 6:web 7:pc */
@property(nonatomic, readwrite) int32_t deviceType;

/** 手机串号 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *imei;

/** 手机品牌 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *brand;

/** 手机型号 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *model;

@end

#pragma mark - ACPBAuthLogOutResp

typedef ACGPB_ENUM(ACPBAuthLogOutResp_FieldNumber) {
  ACPBAuthLogOutResp_FieldNumber_ErrorCode = 1,
  ACPBAuthLogOutResp_FieldNumber_ErrorMessage = 2,
};

ACGPB_FINAL @interface ACPBAuthLogOutResp : ACGPBMessage

/** AuthLogOutRespCmdId  = 0x30018004; */
@property(nonatomic, readwrite) int32_t errorCode;

@property(nonatomic, readwrite, copy, null_resettable) NSString *errorMessage;

@end

#pragma mark - ACPBUpdateApnsTokenReq

typedef ACGPB_ENUM(ACPBUpdateApnsTokenReq_FieldNumber) {
  ACPBUpdateApnsTokenReq_FieldNumber_ApnsToken = 1,
  ACPBUpdateApnsTokenReq_FieldNumber_Brand = 2,
  ACPBUpdateApnsTokenReq_FieldNumber_PushKitToken = 3,
};

/**
 * iOS的用户，用APNS推送时需要token，
 *  -但这个token会过期(比如用户升级了应用，token变了但还是处于登录状态)，故提供这个接口更新用户的token
 **/
ACGPB_FINAL @interface ACPBUpdateApnsTokenReq : ACGPBMessage

/** UpdateApnsTokenReqCmdId = 0x3011100D; */
@property(nonatomic, readwrite, copy, null_resettable) NSString *apnsToken;

/** 手机品牌 (Android需要) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *brand;

/** 苹果 pushKit推送需要的token */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pushKitToken;

@end

#pragma mark - ACPBUpdateApnsTokenResp

typedef ACGPB_ENUM(ACPBUpdateApnsTokenResp_FieldNumber) {
  ACPBUpdateApnsTokenResp_FieldNumber_ErrorCode = 1,
  ACPBUpdateApnsTokenResp_FieldNumber_ErrorMessage = 2,
};

ACGPB_FINAL @interface ACPBUpdateApnsTokenResp : ACGPBMessage

/** UpdateApnsTokenRespCmdId = 0x3011800D; */
@property(nonatomic, readwrite) int32_t errorCode;

@property(nonatomic, readwrite, copy, null_resettable) NSString *errorMessage;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
