// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: acpb.network.message.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(ACGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define ACGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if ACGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/ACGPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "ACGPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "AcpbNetworkMessage.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - AcpbNetworkMessageRoot

@implementation AcpbNetworkMessageRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - AcpbNetworkMessageRoot_FileDescriptor

static ACGPBFileDescriptor *AcpbNetworkMessageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static ACGPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    ACGPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[ACGPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:ACGPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ACPBNetworkRequest

@implementation ACPBNetworkRequest

@dynamic messageSeq;
@dynamic deviceId;
@dynamic sessionId;
@dynamic uid;
@dynamic protocolVersion;
@dynamic destId;
@dynamic body;
@dynamic token;

typedef struct ACPBNetworkRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t protocolVersion;
  NSString *destId;
  NSData *body;
  NSString *token;
  int64_t messageSeq;
  int64_t deviceId;
  int64_t sessionId;
  int64_t uid;
} ACPBNetworkRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "messageSeq",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBNetworkRequest_FieldNumber_MessageSeq,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBNetworkRequest__storage_, messageSeq),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBNetworkRequest_FieldNumber_DeviceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBNetworkRequest__storage_, deviceId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBNetworkRequest_FieldNumber_SessionId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBNetworkRequest__storage_, sessionId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBNetworkRequest_FieldNumber_Uid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACPBNetworkRequest__storage_, uid),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "protocolVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBNetworkRequest_FieldNumber_ProtocolVersion,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ACPBNetworkRequest__storage_, protocolVersion),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "destId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBNetworkRequest_FieldNumber_DestId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ACPBNetworkRequest__storage_, destId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "body",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBNetworkRequest_FieldNumber_Body,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ACPBNetworkRequest__storage_, body),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBytes,
      },
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBNetworkRequest_FieldNumber_Token,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ACPBNetworkRequest__storage_, token),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBNetworkRequest class]
                                     rootClass:[AcpbNetworkMessageRoot class]
                                          file:AcpbNetworkMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBNetworkRequest__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\n\000\003\010\000\004\t\000\006\017\000\007\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACPBNetworkResponse

@implementation ACPBNetworkResponse

@dynamic messageSeq;
@dynamic deviceId;
@dynamic uid;
@dynamic protocolVersion;
@dynamic body;
@dynamic token;
@dynamic code;

typedef struct ACPBNetworkResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t protocolVersion;
  int32_t code;
  NSData *body;
  NSString *token;
  int64_t messageSeq;
  int64_t deviceId;
  int64_t uid;
} ACPBNetworkResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "messageSeq",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBNetworkResponse_FieldNumber_MessageSeq,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACPBNetworkResponse__storage_, messageSeq),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBNetworkResponse_FieldNumber_DeviceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACPBNetworkResponse__storage_, deviceId),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBNetworkResponse_FieldNumber_Uid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACPBNetworkResponse__storage_, uid),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt64,
      },
      {
        .name = "protocolVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBNetworkResponse_FieldNumber_ProtocolVersion,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACPBNetworkResponse__storage_, protocolVersion),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "body",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBNetworkResponse_FieldNumber_Body,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ACPBNetworkResponse__storage_, body),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBytes,
      },
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBNetworkResponse_FieldNumber_Token,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ACPBNetworkResponse__storage_, token),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = ACPBNetworkResponse_FieldNumber_Code,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ACPBNetworkResponse__storage_, code),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACPBNetworkResponse class]
                                     rootClass:[AcpbNetworkMessageRoot class]
                                          file:AcpbNetworkMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACPBNetworkResponse__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\n\000\003\010\000\006\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
