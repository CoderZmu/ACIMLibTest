
/**
 * 定义 单聊类别 REQ/RESP
 */

syntax = "proto3";    //须显式声明为proto3 否则默认为proto2

option java_package = "org.telegram.sgnet";
option java_outer_classname = "SGPrivateChatRpc";

import "acpb.global.structure.proto";


//服务器端主动推送: 有新信息提醒，需要移动终端到服务器拉取
//注: 服务器端主动推送 故没有对应的Req类
message ACPBNewMessageNotificationResp {
    //NewMessageNotificationRespCmdId = 0x60018000;
    int32 errorCode = 1;
    string errorMessage = 2;
    int64 seqno = 3; //服务器端最新的消息序号
}

//推送标题栏上方的新信息提醒，直接推送到移动端，类似GCM/APNS 注: 服务器端主动推送，故没有对应的Req类
message ACPBNewMessagePushResp {
    //NewMessagePushRespCmdId = 0x60018FFF;
    int32 errorCode = 1;
    string errorMessage = 2;
    map<string, ACPBBriefDialogMessage> msg = 3; //map<srcId, BriefDialogMessage>：srcId:发件人id,单聊是对方uid,群聊时为群groupId
}

//推送标题栏上方的新信息提醒，直接推送到移动端，类似GCM/APNS 注: 服务器端主动推送，故没有对应的Req类
//私聊 开始输入主动推送
message ACPBStartTypingPrivateChatMessagePushResp {
    //StartTypingPrivateChatMessagePushRespCmdId = 0x60018FFE;
    int32 errorCode = 1;
    string errorMessage = 2;
    int64 destId = 3; //谁输入的
}

//私聊 结束输入主动推送
message ACPBEndTypingPrivateChatMessagePushResp {
    //EndTypingPrivateChatMessagePushRespCmdId = 0x60018FFD;
    int32 errorCode = 1;
    string errorMessage = 2;
    int64 destId = 3; //谁输入的
}

//发送单聊消息
message ACPBSendPrivateChatMessageReq {
    //SendPrivateChatMessageReqCmdId = 0x60011001;
    string destId = 1; // 收件人uid

    int64 localId = 2; // app端分配的消息id

    string msgPreContent = 3; //消息的前置内容 (如果没有多媒体内容，preContent传空值，统一使用postContent) if 图片，图片地址，通知类消息

    string msgPostContent = 4; //消息的后置内容 (如果没有多媒体内容，请使用这个字段) 纯文本消息

    bool mediaFlag = 5; // 是否有多媒体内容

    int32 mediaConstructor = 6; //消息中包涵的多媒体类型 取值为XLMediaObject其相应的constructor

    string mediaAttribute = 7; //多媒体属性的JSON格式

    string extra = 8;

    string pushContent = 9;

    bytes msgContent = 10;

    bool isSystem = 11; //http服务发起的请求，如果是系统推送，不区分用户是否被封禁

    string objectName = 12; //消息类型

    bool save = 13; //是否需要保存到db
}

message ACPBSendPrivateChatMessageResp {
    //SendPrivateChatMessageRespCmdId = 0x60018001;
    int32 errorCode = 1;
    string errorMessage = 2;
	int64 localId = 3; //app端分配的消息id
	int64 msgId = 4; //服务器端消息id
	int64 msgSendTime = 5; //服务器端记录的发送时间戳
    int64 seqno = 6; // 游标
}

//reply单聊消息
message ACPBReplyPrivateChatMessageReq {
    //ReplyPrivateChatMessageReqCmdId = 0x60011002;
    string destId = 1; // 收件人uid
    int64 localId = 2; // app端分配的消息id
	string msgPreContent = 3; //消息的前置内容 (如果没有多媒体内容，preContent传空值，统一使用postContent)
	string msgPostContent = 4; //消息的后置内容 (如果没有多媒体内容，请使用这个字段)
	bool mediaFlag = 5; // 是否有多媒体内容
	int32 mediaConstructor = 6; //消息中包涵的多媒体类型 取值为XLMediaObject其相应的constructor
	string mediaAttribute = 7; //多媒体属性的JSON格式

	int64 msgIdReferenced = 8; //引用消息的id
	int64 msgSrcIdReferenced = 9; //引用消息的发件人id
	int64 msgDestIdReferenced = 10; //引用消息的收件人id
	string msgPreContentReferenced = 11; //前置消息的内容(存放多媒体内容，如果没有多媒体内容，传空值)
	string msgPostContentReferenced = 12; //后置消息的内容 (如果没有多媒体内容，请使用这个字段)
	bool mediaFlagReferenced = 13; //是否有多媒体内容
	int32 mediaConstructorReferenced = 14; // 消息中包涵的多媒体类型,取值为相应的XLMediaObject其constructor
	string mediaAttributeReferenced = 15; //多媒体属性的JSON格式
	int64 msgSendTimeReferenced = 16; //引用消息的发送时间
}
message ACPBReplyPrivateChatMessageResp {
    //ReplyPrivateChatMessageRespCmdId = 0x60018002;
    int32 errorCode = 1;
    string errorMessage = 2;
	int64 localId = 3; //app端分配的消息id
	int64 msgId = 4; //服务器端消息id
	int64 msgSendTime = 5; //服务器端记录的发送时间戳
}
//转发消息
message ACPBForwardMessageToPrivateChatReq{
	 //ForwardMessageToPrivateChatReqCmdId = 0x60011003;
     string  destId=1;  //收件人uin
     int64  localId=2;  //app端分配的消息id
     string msgPreContent=3;  //前置消息的内容 (如果没有多媒体内容，preContent传空值，)
     string msgPostContent=4;  //后置消息的内容 (如果没有多媒体内容，请使用这个字段)
     bool mediaFlag=5;  //是否有多媒体内容
     int32 mediaConstructor=6;  //消息中包涵的多媒体类型 取值为相应的SGMediaObject其constructor
     string mediaAttribute=7;  //多媒体属性的JSON格式

     int64 msgIdReferenced=8;  //引用消息的id
     int64 msgSrcIdReferenced=9;  //引用消息的发件人uin
     int64 msgDestIdReferenced=10;  //引用消息的收件人uin
     string msgPreContentReferenced=11;  //前置消息的内容 (如果没有多媒体内容，preContent传空值，)
     string msgPostContentReferenced=12;  //后置消息的内容 (如果没有多媒体内容，请使用这个字段)
     bool mediaFlagReferenced=13;  //是否有多媒体内容
     int32 mediaConstructorReferenced=14;  //消息中包涵的多媒体类型 取值为相应的SGMediaObject其constructor
     string mediaAttributeReferenced=15;  //多媒体属性的JSON格式
     int64 msgSendTimeReferenced=16;  //引用消息的发送时间
     bool msgGroupFlagReferenced=17;  //引用消息是否来自群消息
     int64 msgGroupIdReferenced=18;  //如引用消息来自群消息，对应的群uin
}

message ACPBForwardMessageToPrivateChatResp{
	//ForwardMessageToPrivateChatRespCmdId=0x60018003;
  	int32 errorCode = 1;
    string errorMessage = 2;
	int64 localId = 3; //app端分配的消息id
	int64 msgId = 4; //服务器端消息id
	int64 msgSendTime = 5; //服务器端记录的发送时间戳
}

//删除会话以及所有历史消息, 如果没收到消息则不会拉取到该Dialog
message ACPBDeletePrivateChatDialogReq {
    //DeletePrivateChatDialogReqCmdId = 0x60011004;
    string destId = 1; // 会话id
}
message ACPBDeletePrivateChatDialogResp {
    //DeletePrivateChatDialogRespCmdId = 0x60018004;
    int32 errorCode = 1;
    string errorMessage = 2;
}


//获取私聊会话详情
message ACPBGetPrivateChatDialogDetailReq {
    //GetPrivateChatDialogDetailReqCmdId = 0x60011006;
    string destId = 1; // 会话id
}
message ACPBGetPrivateChatDialogDetailResp {
    //GetPrivateChatDialogDetailRespCmdId = 0x60018006;
    int32 errorCode = 1;
    string errorMessage = 2;
    string destId = 3; // 目标会话id
    string dialogTitle = 4; // 会话名称
    string smallAvatarUrl = 5; //头像缩略图
    string originalAvatarUrl = 6; //头像原图
    string qrcodeString = 7; // 二维码对应的URI字符串
    bool stickyFlag = 8; //是否置顶
    bool muteFlag = 9; //是否免打扰
    bool blockFlag = 10; //是否拉黑
    bool burnAfterReadingFlag = 11; //是否阅后即焚
    bool takeScreenshotFlag = 12; //是开启截屏通知
    int64 burnAfterReadingTime=13; //当burnAfterReadingFlag为true的时候才有意义,阅后即焚时间
    
}


message ACPBChatMessage{
 	string destId=1;  //目标id
    repeated int64 msgId=2;//消息id列表
}
//对方消息已读回执
message ACPBSendPrivateChatReadAckReq{
	//SendPrivateChatReadAckReqCmdId=0x60011024;
	repeated ACPBChatMessage chatMessage=1;
}

message ACPBSendPrivateChatReadAckResp{
    //SendPrivateChatReadAckRespCmdId=0x60018024;
    int32 errorCode = 1;
    string errorMessage = 2;
}


//获取新消息 注：不区分privatechat/groupchat
message ACPBGetNewMessageReq {
    //GetNewMessageReqCmdId = 0x60011027;
    int64 offset = 1; //客户端持有的当前消息序号偏移量
    int32 rows = 2; //取正值，表示分页请求
}
message ACPBGetNewMessageResp {
    //GetNewMessageRespCmdId = 0x60018027;
    int32 errorCode = 1;
    string errorMessage = 2;
    int64 offset = 3; // 服务器端对应的消息偏移量d
    int64 seqno = 4; //服务器端最新的消息序号
    map<string, ACPBDialogMessageList> msg = 5; // map<destId, DialogMessageList> 有新消息的会话对应的消息列表
    map<string, ACPBReferenceDialogMessage> reference = 6; // map<msgIdReferenced, ReferenceDialogMessage> 引用的消息信息
}

message ACPBDialogMessageList{
    repeated ACPBDialogMessage dialogMessage = 1;
}


//置顶设置
message ACPBUpdatePrivateChatDialogStickyConfigReq {
    //UpdatePrivateChatDialogStickyConfigReqCmdId = 0x6001100A;
    string destId = 1; //目标会话
    bool stickyFlag = 2; //是否置顶
}
message ACPBUpdatePrivateChatDialogStickyConfigResp {
    //UpdatePrivateChatDialogStickyConfigRespCmdId = 0x6001800A;
    int32 errorCode = 1;
    string errorMessage = 2;
}

//免打扰设置
message ACPBUpdatePrivateChatDialogMuteConfigReq {
    //UpdatePrivateChatDialogMuteConfigReqCmdId = 0x6001100B;
    string destId = 1; //目标会话
    bool muteFlag = 2; //是否免打扰
}
message ACPBUpdatePrivateChatDialogMuteConfigResp {
    //UpdatePrivateChatDialogMuteConfigRespCmdId = 0x6001800B;
    int32 errorCode = 1;
    string errorMessage = 2;
}

//删除消息
message ACPBDeleteChatMessageReq {
    //DeletePrivateChatMessageReqCmdId = 0x6001100D;
    string destId = 1; //目标会话
    int64 msgId = 2; //待删除的消息id
    repeated int64 msgIdList = 3; // 批量删除的消息Id列表
    
}
message ACPBDeleteChatMessageResp {
    //DeletePrivateChatMessageRespCmdId = 0x6001800D;
    int32 errorCode = 1;
    string errorMessage = 2;
}

//删除所有历史消息, 该dialog还保留
message ACPBDeletePrivateChatHistoryReq {
    //DeletePrivateChatHistoryReqCmdId = 0x6001100E;
    string destId = 1; //目标会话
    int64 msgId = 2; //待删除的消息id
}
//清除历史消息 不区分私聊和群聊
message ACPBCleanHistoryMessageReq {
    //DeletePrivateChatDialogReqCmdId = 0x60011004;
    string destId = 1; // 会话id
    int32 type = 2; //0私聊 1群聊
    int64 msgTime = 3; //删除消息时间戳
}
message ACPBCleanHistoryMessageResp {
    //DeletePrivateChatDialogRespCmdId = 0x60018004;
    int32 errorCode = 1;
    string errorMessage = 2;
}

message ACPBDeletePrivateChatHistoryResp {
    //DeletePrivateChatHistoryRespCmdId = 0x6001800E;
    int32 errorCode = 1;
    string errorMessage = 2;
}

//获取会话概要信息 注: 同GetDialogListReq一样，该请求不区分 privatechat/groupchat
message ACPBGetBriefDialogListReq {
    //GetBriefDialogListReqCmdId = 0x6001101F;
    repeated string destId = 1; //目标destId列表
}
message ACPBGetBriefDialogListResp {
    //GetBriefDialogListRespCmdId = 0x6001801F;
    int32 errorCode = 1;
    string errorMessage = 2;
    repeated int64 notExistDestId = 3; //List<destId> 不存在会话的destId列表
    int64 seqno = 4; //服务器端最新的消息序号
    map<string, ACPBBriefDialog> briefDialog = 5; // Map<destId, BriefDialog>
}

//更新阅后即焚设置
message ACPBUpdatePrivateChatDialogBurnAfterReadingConfigReq {
    //UpdatePrivateChatDialogBurnAfterReadingConfigReqCmdId = 0x60011014;
    int64 destId = 1; //目标会话
    bool burnAfterReadingFlag = 2; //是否阅后即焚
    int64 burnAfterReadingTime=3; //当burnAfterReadingFlag为true的时候才有意义,阅后即焚时间
}
message ACPBUpdatePrivateChatDialogBurnAfterReadingConfigResp {
    //UpdatePrivateChatDialogBurnAfterReadingConfigRespCmdId = 0x60018014;
    int32 errorCode = 1;
    string errorMessage = 2;
}

//获取会话密钥 注: 该请求不区分 privatechat/groupchat
message ACPBGetDialogKeyReq {
    //GetDialogKeyReqCmdId = 0x60011015;
    repeated string destId = 1; //会话id列表
    string clientSign = 2; //客户端签名
}
message ACPBGetDialogKeyResp {
    //GetDialogKeyRespCmdId = 0x60018015;
    int32 errorCode = 1;
    string errorMessage = 2;
    int64 dialogKeyVersion = 3; // dialogKey数据版本
    repeated int64 retryUid = 4; //未找到dialogKey的uid列表
    map<string, ACPBAesKeyAndIV> entry = 5; //有dialogKey的uid
    string serverSign = 6; //服务器端签名
}
//撤回消息 请求
message ACPBRecallPrivateChatMessageReq {
   //RecallPrivateChatMessageReqCmdId = 0x60011022;
    string destId = 1; //目标会话
    int64 msgId = 2; //待删除的消息id
}
message ACPBRecallPrivateChatMessageResp {
    //RecallPrivateChatMessageRespCmdId = 0x60018022;
    int32 errorCode = 1;
    string errorMessage = 2;
}

//开始正在输入
message ACPBStartTypingPrivateChatReq {
	//StartTypingPrivateChatReqCmdId = 0x60011020;
	string destId = 1; //目标id
}
message ACPBStartTypingPrivateChatResp {
	//StartTypingPrivateChatRespCmdId = 0x60018020;
    int32 errorCode = 1;
    string errorMessage = 2;
}

//结束正在输入
message ACPBEndTypingPrivateChatReq {
	//EndTypingPrivateChatReqCmdId = 0x60011021;
	string destId = 1; //目标id
}
message ACPBEndTypingPrivateChatResp {
	//EndTypingPrivateChatRespCmdId = 0x60018021;
    int32 errorCode = 1;
    string errorMessage = 2;
}

//已到达对方手机回执
message ACPBSendPrivateChatArrivalAckReq {
    //SendPrivateChatArrivalAckReqCmdId = 0x60011023;
    repeated ACPBChatMessage chatMessage = 1; //接收者与已达消息 的集合
}
message ACPBSendPrivateChatArrivalAckResp {
	//SendPrivateChatArrivalAckRespCmdId = 0x60018023;
    int32 errorCode = 1;
    string errorMessage = 2;
}


//根据时间获取dialog设置
message ACPBGetNewSettingDialogListReq {
    //0x60018036
    int64 time = 1; //上次dialog设置时间
}
message ACPBGetNewSettingDialogListResp {
    //0x60018037
    int32 errorCode = 1;
    string errorMessage = 2;
    map<string, ACPBBriefDialog> briefDialog = 3; // Map<destId, BriefDialog>
    int64 setTime = 4;//最新设置时间
}



// 查询历史消息请求
message ACPBGetHistoryMessageReq {
    string dialogKeys = 1;
    int64 offset = 2; //较新的消息offset
    int64 oldOffset = 3; //老消息offset
    int32 rows = 4;
    bool newToOld = 5;
}

// 查询历史消息响应
message ACPBGetHistoryMessageResp {
    int32 errorCode = 1;
    string errorMessage = 2;
    ACPBDialogMessageList msg = 3;
    bool isEnd = 4;
}
