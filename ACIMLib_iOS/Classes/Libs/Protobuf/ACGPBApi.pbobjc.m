// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/api.proto

#import "ACGPBProtocolBuffers_RuntimeSupport.h"
#import "ACGPBApi.pbobjc.h"

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
ACGPBObjCClassDeclaration(ACGPBMethod);
ACGPBObjCClassDeclaration(ACGPBMixin);
ACGPBObjCClassDeclaration(ACGPBOption);
ACGPBObjCClassDeclaration(ACGPBSourceContext);

#pragma mark - ACGPBApiRoot

@implementation ACGPBApiRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ACGPBApiRoot_FileDescriptor

static ACGPBFileDescriptor *ACGPBApiRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static ACGPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    ACGPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[ACGPBFileDescriptor alloc] initWithPackage:@"google.protobuf"
                                                 objcPrefix:@"ACGPB"
                                                     syntax:ACGPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ACGPBApi

@implementation ACGPBApi

@dynamic name;
@dynamic methodsArray, methodsArray_Count;
@dynamic optionsArray, optionsArray_Count;
@dynamic version;
@dynamic hasSourceContext, sourceContext;
@dynamic mixinsArray, mixinsArray_Count;
@dynamic syntax;

typedef struct ACGPBApi__storage_ {
  uint32_t _has_storage_[1];
  ACGPBSyntax syntax;
  NSString *name;
  NSMutableArray *methodsArray;
  NSMutableArray *optionsArray;
  NSString *version;
  ACGPBSourceContext *sourceContext;
  NSMutableArray *mixinsArray;
} ACGPBApi__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBApi_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACGPBApi__storage_, name),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "methodsArray",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACGPBMethod),
        .number = ACGPBApi_FieldNumber_MethodsArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACGPBApi__storage_, methodsArray),
        .flags = ACGPBFieldRepeated,
        .dataType = ACGPBDataTypeMessage,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACGPBOption),
        .number = ACGPBApi_FieldNumber_OptionsArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACGPBApi__storage_, optionsArray),
        .flags = ACGPBFieldRepeated,
        .dataType = ACGPBDataTypeMessage,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBApi_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACGPBApi__storage_, version),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "sourceContext",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACGPBSourceContext),
        .number = ACGPBApi_FieldNumber_SourceContext,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACGPBApi__storage_, sourceContext),
        .flags = ACGPBFieldOptional,
        .dataType = ACGPBDataTypeMessage,
      },
      {
        .name = "mixinsArray",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACGPBMixin),
        .number = ACGPBApi_FieldNumber_MixinsArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACGPBApi__storage_, mixinsArray),
        .flags = ACGPBFieldRepeated,
        .dataType = ACGPBDataTypeMessage,
      },
      {
        .name = "syntax",
        .dataTypeSpecific.enumDescFunc = ACGPBSyntax_EnumDescriptor,
        .number = ACGPBApi_FieldNumber_Syntax,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACGPBApi__storage_, syntax),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldHasEnumDescriptor | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeEnum,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACGPBApi class]
                                     rootClass:[ACGPBApiRoot class]
                                          file:ACGPBApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACGPBApi__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ACGPBApi_Syntax_RawValue(ACGPBApi *message) {
  ACGPBDescriptor *descriptor = [ACGPBApi descriptor];
  ACGPBFieldDescriptor *field = [descriptor fieldWithNumber:ACGPBApi_FieldNumber_Syntax];
  return ACGPBGetMessageRawEnumField(message, field);
}

void SetACGPBApi_Syntax_RawValue(ACGPBApi *message, int32_t value) {
  ACGPBDescriptor *descriptor = [ACGPBApi descriptor];
  ACGPBFieldDescriptor *field = [descriptor fieldWithNumber:ACGPBApi_FieldNumber_Syntax];
  ACGPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - ACGPBMethod

@implementation ACGPBMethod

@dynamic name;
@dynamic requestTypeURL;
@dynamic requestStreaming;
@dynamic responseTypeURL;
@dynamic responseStreaming;
@dynamic optionsArray, optionsArray_Count;
@dynamic syntax;

typedef struct ACGPBMethod__storage_ {
  uint32_t _has_storage_[1];
  ACGPBSyntax syntax;
  NSString *name;
  NSString *requestTypeURL;
  NSString *responseTypeURL;
  NSMutableArray *optionsArray;
} ACGPBMethod__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBMethod_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACGPBMethod__storage_, name),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "requestTypeURL",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBMethod_FieldNumber_RequestTypeURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACGPBMethod__storage_, requestTypeURL),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "requestStreaming",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBMethod_FieldNumber_RequestStreaming,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "responseTypeURL",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBMethod_FieldNumber_ResponseTypeURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ACGPBMethod__storage_, responseTypeURL),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "responseStreaming",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBMethod_FieldNumber_ResponseStreaming,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACGPBOption),
        .number = ACGPBMethod_FieldNumber_OptionsArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACGPBMethod__storage_, optionsArray),
        .flags = ACGPBFieldRepeated,
        .dataType = ACGPBDataTypeMessage,
      },
      {
        .name = "syntax",
        .dataTypeSpecific.enumDescFunc = ACGPBSyntax_EnumDescriptor,
        .number = ACGPBMethod_FieldNumber_Syntax,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ACGPBMethod__storage_, syntax),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldHasEnumDescriptor | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeEnum,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACGPBMethod class]
                                     rootClass:[ACGPBApiRoot class]
                                          file:ACGPBApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACGPBMethod__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\007\244\241!!\000\004\010\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ACGPBMethod_Syntax_RawValue(ACGPBMethod *message) {
  ACGPBDescriptor *descriptor = [ACGPBMethod descriptor];
  ACGPBFieldDescriptor *field = [descriptor fieldWithNumber:ACGPBMethod_FieldNumber_Syntax];
  return ACGPBGetMessageRawEnumField(message, field);
}

void SetACGPBMethod_Syntax_RawValue(ACGPBMethod *message, int32_t value) {
  ACGPBDescriptor *descriptor = [ACGPBMethod descriptor];
  ACGPBFieldDescriptor *field = [descriptor fieldWithNumber:ACGPBMethod_FieldNumber_Syntax];
  ACGPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - ACGPBMixin

@implementation ACGPBMixin

@dynamic name;
@dynamic root;

typedef struct ACGPBMixin__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *root;
} ACGPBMixin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBMixin_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACGPBMixin__storage_, name),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "root",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBMixin_FieldNumber_Root,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACGPBMixin__storage_, root),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACGPBMixin class]
                                     rootClass:[ACGPBApiRoot class]
                                          file:ACGPBApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACGPBMixin__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
