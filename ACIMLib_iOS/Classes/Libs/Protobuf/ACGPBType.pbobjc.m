// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/type.proto

#import "ACGPBProtocolBuffers_RuntimeSupport.h"
#import "ACGPBType.pbobjc.h"

#import <stdatomic.h>

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
ACGPBObjCClassDeclaration(ACGPBAny);
ACGPBObjCClassDeclaration(ACGPBEnumValue);
ACGPBObjCClassDeclaration(ACGPBField);
ACGPBObjCClassDeclaration(ACGPBOption);
ACGPBObjCClassDeclaration(ACGPBSourceContext);

#pragma mark - ACGPBTypeRoot

@implementation ACGPBTypeRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ACGPBTypeRoot_FileDescriptor

static ACGPBFileDescriptor *ACGPBTypeRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static ACGPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    ACGPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[ACGPBFileDescriptor alloc] initWithPackage:@"google.protobuf"
                                                 objcPrefix:@"ACGPB"
                                                     syntax:ACGPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum ACGPBSyntax

ACGPBEnumDescriptor *ACGPBSyntax_EnumDescriptor(void) {
  static _Atomic(ACGPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SyntaxProto2\000SyntaxProto3\000";
    static const int32_t values[] = {
        ACGPBSyntax_SyntaxProto2,
        ACGPBSyntax_SyntaxProto3,
    };
    ACGPBEnumDescriptor *worker =
        [ACGPBEnumDescriptor allocDescriptorForName:ACGPBNSStringifySymbol(ACGPBSyntax)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ACGPBSyntax_IsValidValue];
    ACGPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ACGPBSyntax_IsValidValue(int32_t value__) {
  switch (value__) {
    case ACGPBSyntax_SyntaxProto2:
    case ACGPBSyntax_SyntaxProto3:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ACGPBType

@implementation ACGPBType

@dynamic name;
@dynamic fieldsArray, fieldsArray_Count;
@dynamic oneofsArray, oneofsArray_Count;
@dynamic optionsArray, optionsArray_Count;
@dynamic hasSourceContext, sourceContext;
@dynamic syntax;

typedef struct ACGPBType__storage_ {
  uint32_t _has_storage_[1];
  ACGPBSyntax syntax;
  NSString *name;
  NSMutableArray *fieldsArray;
  NSMutableArray *oneofsArray;
  NSMutableArray *optionsArray;
  ACGPBSourceContext *sourceContext;
} ACGPBType__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBType_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACGPBType__storage_, name),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "fieldsArray",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACGPBField),
        .number = ACGPBType_FieldNumber_FieldsArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACGPBType__storage_, fieldsArray),
        .flags = ACGPBFieldRepeated,
        .dataType = ACGPBDataTypeMessage,
      },
      {
        .name = "oneofsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBType_FieldNumber_OneofsArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACGPBType__storage_, oneofsArray),
        .flags = ACGPBFieldRepeated,
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACGPBOption),
        .number = ACGPBType_FieldNumber_OptionsArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACGPBType__storage_, optionsArray),
        .flags = ACGPBFieldRepeated,
        .dataType = ACGPBDataTypeMessage,
      },
      {
        .name = "sourceContext",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACGPBSourceContext),
        .number = ACGPBType_FieldNumber_SourceContext,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACGPBType__storage_, sourceContext),
        .flags = ACGPBFieldOptional,
        .dataType = ACGPBDataTypeMessage,
      },
      {
        .name = "syntax",
        .dataTypeSpecific.enumDescFunc = ACGPBSyntax_EnumDescriptor,
        .number = ACGPBType_FieldNumber_Syntax,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACGPBType__storage_, syntax),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldHasEnumDescriptor | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeEnum,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACGPBType class]
                                     rootClass:[ACGPBTypeRoot class]
                                          file:ACGPBTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACGPBType__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ACGPBType_Syntax_RawValue(ACGPBType *message) {
  ACGPBDescriptor *descriptor = [ACGPBType descriptor];
  ACGPBFieldDescriptor *field = [descriptor fieldWithNumber:ACGPBType_FieldNumber_Syntax];
  return ACGPBGetMessageRawEnumField(message, field);
}

void SetACGPBType_Syntax_RawValue(ACGPBType *message, int32_t value) {
  ACGPBDescriptor *descriptor = [ACGPBType descriptor];
  ACGPBFieldDescriptor *field = [descriptor fieldWithNumber:ACGPBType_FieldNumber_Syntax];
  ACGPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - ACGPBField

@implementation ACGPBField

@dynamic kind;
@dynamic cardinality;
@dynamic number;
@dynamic name;
@dynamic typeURL;
@dynamic oneofIndex;
@dynamic packed;
@dynamic optionsArray, optionsArray_Count;
@dynamic jsonName;
@dynamic defaultValue;

typedef struct ACGPBField__storage_ {
  uint32_t _has_storage_[1];
  ACGPBField_Kind kind;
  ACGPBField_Cardinality cardinality;
  int32_t number;
  int32_t oneofIndex;
  NSString *name;
  NSString *typeURL;
  NSMutableArray *optionsArray;
  NSString *jsonName;
  NSString *defaultValue;
} ACGPBField__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "kind",
        .dataTypeSpecific.enumDescFunc = ACGPBField_Kind_EnumDescriptor,
        .number = ACGPBField_FieldNumber_Kind,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACGPBField__storage_, kind),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldHasEnumDescriptor | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeEnum,
      },
      {
        .name = "cardinality",
        .dataTypeSpecific.enumDescFunc = ACGPBField_Cardinality_EnumDescriptor,
        .number = ACGPBField_FieldNumber_Cardinality,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACGPBField__storage_, cardinality),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldHasEnumDescriptor | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeEnum,
      },
      {
        .name = "number",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBField_FieldNumber_Number,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACGPBField__storage_, number),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBField_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACGPBField__storage_, name),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "typeURL",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBField_FieldNumber_TypeURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ACGPBField__storage_, typeURL),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldTextFormatNameCustom | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "oneofIndex",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBField_FieldNumber_OneofIndex,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ACGPBField__storage_, oneofIndex),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "packed",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBField_FieldNumber_Packed,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACGPBOption),
        .number = ACGPBField_FieldNumber_OptionsArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACGPBField__storage_, optionsArray),
        .flags = ACGPBFieldRepeated,
        .dataType = ACGPBDataTypeMessage,
      },
      {
        .name = "jsonName",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBField_FieldNumber_JsonName,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ACGPBField__storage_, jsonName),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "defaultValue",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBField_FieldNumber_DefaultValue,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ACGPBField__storage_, defaultValue),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACGPBField class]
                                     rootClass:[ACGPBTypeRoot class]
                                          file:ACGPBTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACGPBField__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !ACGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ACGPBField_Kind_RawValue(ACGPBField *message) {
  ACGPBDescriptor *descriptor = [ACGPBField descriptor];
  ACGPBFieldDescriptor *field = [descriptor fieldWithNumber:ACGPBField_FieldNumber_Kind];
  return ACGPBGetMessageRawEnumField(message, field);
}

void SetACGPBField_Kind_RawValue(ACGPBField *message, int32_t value) {
  ACGPBDescriptor *descriptor = [ACGPBField descriptor];
  ACGPBFieldDescriptor *field = [descriptor fieldWithNumber:ACGPBField_FieldNumber_Kind];
  ACGPBSetMessageRawEnumField(message, field, value);
}

int32_t ACGPBField_Cardinality_RawValue(ACGPBField *message) {
  ACGPBDescriptor *descriptor = [ACGPBField descriptor];
  ACGPBFieldDescriptor *field = [descriptor fieldWithNumber:ACGPBField_FieldNumber_Cardinality];
  return ACGPBGetMessageRawEnumField(message, field);
}

void SetACGPBField_Cardinality_RawValue(ACGPBField *message, int32_t value) {
  ACGPBDescriptor *descriptor = [ACGPBField descriptor];
  ACGPBFieldDescriptor *field = [descriptor fieldWithNumber:ACGPBField_FieldNumber_Cardinality];
  ACGPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum ACGPBField_Kind

ACGPBEnumDescriptor *ACGPBField_Kind_EnumDescriptor(void) {
  static _Atomic(ACGPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TypeUnknown\000TypeDouble\000TypeFloat\000TypeInt"
        "64\000TypeUint64\000TypeInt32\000TypeFixed64\000Type"
        "Fixed32\000TypeBool\000TypeString\000TypeGroup\000Ty"
        "peMessage\000TypeBytes\000TypeUint32\000TypeEnum\000"
        "TypeSfixed32\000TypeSfixed64\000TypeSint32\000Typ"
        "eSint64\000";
    static const int32_t values[] = {
        ACGPBField_Kind_TypeUnknown,
        ACGPBField_Kind_TypeDouble,
        ACGPBField_Kind_TypeFloat,
        ACGPBField_Kind_TypeInt64,
        ACGPBField_Kind_TypeUint64,
        ACGPBField_Kind_TypeInt32,
        ACGPBField_Kind_TypeFixed64,
        ACGPBField_Kind_TypeFixed32,
        ACGPBField_Kind_TypeBool,
        ACGPBField_Kind_TypeString,
        ACGPBField_Kind_TypeGroup,
        ACGPBField_Kind_TypeMessage,
        ACGPBField_Kind_TypeBytes,
        ACGPBField_Kind_TypeUint32,
        ACGPBField_Kind_TypeEnum,
        ACGPBField_Kind_TypeSfixed32,
        ACGPBField_Kind_TypeSfixed64,
        ACGPBField_Kind_TypeSint32,
        ACGPBField_Kind_TypeSint64,
    };
    ACGPBEnumDescriptor *worker =
        [ACGPBEnumDescriptor allocDescriptorForName:ACGPBNSStringifySymbol(ACGPBField_Kind)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ACGPBField_Kind_IsValidValue];
    ACGPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ACGPBField_Kind_IsValidValue(int32_t value__) {
  switch (value__) {
    case ACGPBField_Kind_TypeUnknown:
    case ACGPBField_Kind_TypeDouble:
    case ACGPBField_Kind_TypeFloat:
    case ACGPBField_Kind_TypeInt64:
    case ACGPBField_Kind_TypeUint64:
    case ACGPBField_Kind_TypeInt32:
    case ACGPBField_Kind_TypeFixed64:
    case ACGPBField_Kind_TypeFixed32:
    case ACGPBField_Kind_TypeBool:
    case ACGPBField_Kind_TypeString:
    case ACGPBField_Kind_TypeGroup:
    case ACGPBField_Kind_TypeMessage:
    case ACGPBField_Kind_TypeBytes:
    case ACGPBField_Kind_TypeUint32:
    case ACGPBField_Kind_TypeEnum:
    case ACGPBField_Kind_TypeSfixed32:
    case ACGPBField_Kind_TypeSfixed64:
    case ACGPBField_Kind_TypeSint32:
    case ACGPBField_Kind_TypeSint64:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ACGPBField_Cardinality

ACGPBEnumDescriptor *ACGPBField_Cardinality_EnumDescriptor(void) {
  static _Atomic(ACGPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CardinalityUnknown\000CardinalityOptional\000C"
        "ardinalityRequired\000CardinalityRepeated\000";
    static const int32_t values[] = {
        ACGPBField_Cardinality_CardinalityUnknown,
        ACGPBField_Cardinality_CardinalityOptional,
        ACGPBField_Cardinality_CardinalityRequired,
        ACGPBField_Cardinality_CardinalityRepeated,
    };
    ACGPBEnumDescriptor *worker =
        [ACGPBEnumDescriptor allocDescriptorForName:ACGPBNSStringifySymbol(ACGPBField_Cardinality)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ACGPBField_Cardinality_IsValidValue];
    ACGPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ACGPBField_Cardinality_IsValidValue(int32_t value__) {
  switch (value__) {
    case ACGPBField_Cardinality_CardinalityUnknown:
    case ACGPBField_Cardinality_CardinalityOptional:
    case ACGPBField_Cardinality_CardinalityRequired:
    case ACGPBField_Cardinality_CardinalityRepeated:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ACGPBEnum

@implementation ACGPBEnum

@dynamic name;
@dynamic enumvalueArray, enumvalueArray_Count;
@dynamic optionsArray, optionsArray_Count;
@dynamic hasSourceContext, sourceContext;
@dynamic syntax;

typedef struct ACGPBEnum__storage_ {
  uint32_t _has_storage_[1];
  ACGPBSyntax syntax;
  NSString *name;
  NSMutableArray *enumvalueArray;
  NSMutableArray *optionsArray;
  ACGPBSourceContext *sourceContext;
} ACGPBEnum__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBEnum_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACGPBEnum__storage_, name),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "enumvalueArray",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACGPBEnumValue),
        .number = ACGPBEnum_FieldNumber_EnumvalueArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACGPBEnum__storage_, enumvalueArray),
        .flags = ACGPBFieldRepeated,
        .dataType = ACGPBDataTypeMessage,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACGPBOption),
        .number = ACGPBEnum_FieldNumber_OptionsArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACGPBEnum__storage_, optionsArray),
        .flags = ACGPBFieldRepeated,
        .dataType = ACGPBDataTypeMessage,
      },
      {
        .name = "sourceContext",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACGPBSourceContext),
        .number = ACGPBEnum_FieldNumber_SourceContext,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACGPBEnum__storage_, sourceContext),
        .flags = ACGPBFieldOptional,
        .dataType = ACGPBDataTypeMessage,
      },
      {
        .name = "syntax",
        .dataTypeSpecific.enumDescFunc = ACGPBSyntax_EnumDescriptor,
        .number = ACGPBEnum_FieldNumber_Syntax,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACGPBEnum__storage_, syntax),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldHasEnumDescriptor | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeEnum,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACGPBEnum class]
                                     rootClass:[ACGPBTypeRoot class]
                                          file:ACGPBTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACGPBEnum__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ACGPBEnum_Syntax_RawValue(ACGPBEnum *message) {
  ACGPBDescriptor *descriptor = [ACGPBEnum descriptor];
  ACGPBFieldDescriptor *field = [descriptor fieldWithNumber:ACGPBEnum_FieldNumber_Syntax];
  return ACGPBGetMessageRawEnumField(message, field);
}

void SetACGPBEnum_Syntax_RawValue(ACGPBEnum *message, int32_t value) {
  ACGPBDescriptor *descriptor = [ACGPBEnum descriptor];
  ACGPBFieldDescriptor *field = [descriptor fieldWithNumber:ACGPBEnum_FieldNumber_Syntax];
  ACGPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - ACGPBEnumValue

@implementation ACGPBEnumValue

@dynamic name;
@dynamic number;
@dynamic optionsArray, optionsArray_Count;

typedef struct ACGPBEnumValue__storage_ {
  uint32_t _has_storage_[1];
  int32_t number;
  NSString *name;
  NSMutableArray *optionsArray;
} ACGPBEnumValue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBEnumValue_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACGPBEnumValue__storage_, name),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "number",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBEnumValue_FieldNumber_Number,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACGPBEnumValue__storage_, number),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeInt32,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACGPBOption),
        .number = ACGPBEnumValue_FieldNumber_OptionsArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACGPBEnumValue__storage_, optionsArray),
        .flags = ACGPBFieldRepeated,
        .dataType = ACGPBDataTypeMessage,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACGPBEnumValue class]
                                     rootClass:[ACGPBTypeRoot class]
                                          file:ACGPBTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACGPBEnumValue__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACGPBOption

@implementation ACGPBOption

@dynamic name;
@dynamic hasValue, value;

typedef struct ACGPBOption__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  ACGPBAny *value;
} ACGPBOption__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBOption_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACGPBOption__storage_, name),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldClearHasIvarOnZero),
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACGPBAny),
        .number = ACGPBOption_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACGPBOption__storage_, value),
        .flags = ACGPBFieldOptional,
        .dataType = ACGPBDataTypeMessage,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACGPBOption class]
                                     rootClass:[ACGPBTypeRoot class]
                                          file:ACGPBTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACGPBOption__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
