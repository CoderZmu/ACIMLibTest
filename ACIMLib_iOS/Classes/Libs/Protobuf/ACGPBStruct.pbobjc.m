// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/struct.proto

#import "ACGPBProtocolBuffers_RuntimeSupport.h"
#import "ACGPBStruct.pbobjc.h"

#import <stdatomic.h>

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
ACGPBObjCClassDeclaration(ACGPBListValue);
ACGPBObjCClassDeclaration(ACGPBStruct);
ACGPBObjCClassDeclaration(ACGPBValue);

#pragma mark - ACGPBStructRoot

@implementation ACGPBStructRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ACGPBStructRoot_FileDescriptor

static ACGPBFileDescriptor *ACGPBStructRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static ACGPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    ACGPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[ACGPBFileDescriptor alloc] initWithPackage:@"google.protobuf"
                                                 objcPrefix:@"ACGPB"
                                                     syntax:ACGPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum ACGPBNullValue

ACGPBEnumDescriptor *ACGPBNullValue_EnumDescriptor(void) {
  static _Atomic(ACGPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NullValue\000";
    static const int32_t values[] = {
        ACGPBNullValue_NullValue,
    };
    ACGPBEnumDescriptor *worker =
        [ACGPBEnumDescriptor allocDescriptorForName:ACGPBNSStringifySymbol(ACGPBNullValue)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ACGPBNullValue_IsValidValue];
    ACGPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ACGPBNullValue_IsValidValue(int32_t value__) {
  switch (value__) {
    case ACGPBNullValue_NullValue:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ACGPBStruct

@implementation ACGPBStruct

@dynamic fields, fields_Count;

typedef struct ACGPBStruct__storage_ {
  uint32_t _has_storage_[1];
  NSMutableDictionary *fields;
} ACGPBStruct__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "fields",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACGPBValue),
        .number = ACGPBStruct_FieldNumber_Fields,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACGPBStruct__storage_, fields),
        .flags = ACGPBFieldMapKeyString,
        .dataType = ACGPBDataTypeMessage,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACGPBStruct class]
                                     rootClass:[ACGPBStructRoot class]
                                          file:ACGPBStructRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACGPBStruct__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACGPBValue

@implementation ACGPBValue

@dynamic kindOneOfCase;
@dynamic nullValue;
@dynamic numberValue;
@dynamic stringValue;
@dynamic boolValue;
@dynamic structValue;
@dynamic listValue;

typedef struct ACGPBValue__storage_ {
  uint32_t _has_storage_[2];
  ACGPBNullValue nullValue;
  NSString *stringValue;
  ACGPBStruct *structValue;
  ACGPBListValue *listValue;
  double numberValue;
} ACGPBValue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "nullValue",
        .dataTypeSpecific.enumDescFunc = ACGPBNullValue_EnumDescriptor,
        .number = ACGPBValue_FieldNumber_NullValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ACGPBValue__storage_, nullValue),
        .flags = (ACGPBFieldFlags)(ACGPBFieldOptional | ACGPBFieldHasEnumDescriptor),
        .dataType = ACGPBDataTypeEnum,
      },
      {
        .name = "numberValue",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBValue_FieldNumber_NumberValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ACGPBValue__storage_, numberValue),
        .flags = ACGPBFieldOptional,
        .dataType = ACGPBDataTypeDouble,
      },
      {
        .name = "stringValue",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBValue_FieldNumber_StringValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ACGPBValue__storage_, stringValue),
        .flags = ACGPBFieldOptional,
        .dataType = ACGPBDataTypeString,
      },
      {
        .name = "boolValue",
        .dataTypeSpecific.clazz = Nil,
        .number = ACGPBValue_FieldNumber_BoolValue,
        .hasIndex = -1,
        .offset = 0,  // Stored in _has_storage_ to save space.
        .flags = ACGPBFieldOptional,
        .dataType = ACGPBDataTypeBool,
      },
      {
        .name = "structValue",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACGPBStruct),
        .number = ACGPBValue_FieldNumber_StructValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ACGPBValue__storage_, structValue),
        .flags = ACGPBFieldOptional,
        .dataType = ACGPBDataTypeMessage,
      },
      {
        .name = "listValue",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACGPBListValue),
        .number = ACGPBValue_FieldNumber_ListValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ACGPBValue__storage_, listValue),
        .flags = ACGPBFieldOptional,
        .dataType = ACGPBDataTypeMessage,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACGPBValue class]
                                     rootClass:[ACGPBStructRoot class]
                                          file:ACGPBStructRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACGPBValue__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "kind",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ACGPBValue_NullValue_RawValue(ACGPBValue *message) {
  ACGPBDescriptor *descriptor = [ACGPBValue descriptor];
  ACGPBFieldDescriptor *field = [descriptor fieldWithNumber:ACGPBValue_FieldNumber_NullValue];
  return ACGPBGetMessageRawEnumField(message, field);
}

void SetACGPBValue_NullValue_RawValue(ACGPBValue *message, int32_t value) {
  ACGPBDescriptor *descriptor = [ACGPBValue descriptor];
  ACGPBFieldDescriptor *field = [descriptor fieldWithNumber:ACGPBValue_FieldNumber_NullValue];
  ACGPBSetMessageRawEnumField(message, field, value);
}

void ACGPBValue_ClearKindOneOfCase(ACGPBValue *message) {
  ACGPBDescriptor *descriptor = [ACGPBValue descriptor];
  ACGPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  ACGPBClearOneof(message, oneof);
}
#pragma mark - ACGPBListValue

@implementation ACGPBListValue

@dynamic valuesArray, valuesArray_Count;

typedef struct ACGPBListValue__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *valuesArray;
} ACGPBListValue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (ACGPBDescriptor *)descriptor {
  static ACGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static ACGPBMessageFieldDescription fields[] = {
      {
        .name = "valuesArray",
        .dataTypeSpecific.clazz = ACGPBObjCClass(ACGPBValue),
        .number = ACGPBListValue_FieldNumber_ValuesArray,
        .hasIndex = ACGPBNoHasBit,
        .offset = (uint32_t)offsetof(ACGPBListValue__storage_, valuesArray),
        .flags = ACGPBFieldRepeated,
        .dataType = ACGPBDataTypeMessage,
      },
    };
    ACGPBDescriptor *localDescriptor =
        [ACGPBDescriptor allocDescriptorForClass:[ACGPBListValue class]
                                     rootClass:[ACGPBStructRoot class]
                                          file:ACGPBStructRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(ACGPBMessageFieldDescription))
                                   storageSize:sizeof(ACGPBListValue__storage_)
                                         flags:(ACGPBDescriptorInitializationFlags)(ACGPBDescriptorInitializationFlag_UsesClassRefs | ACGPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
